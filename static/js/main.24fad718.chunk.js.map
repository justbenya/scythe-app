{"version":3,"sources":["history.ts","common/utils.ts","features/players/playersSlice.ts","common/scytheLogic.ts","img/bg.jpg","pages/First.tsx","components/FactionIcon.tsx","components/FactionIconWithBadge.tsx","components/TabPanel.tsx","components/FullWidthTabs.tsx","components/FactionCharacterImage.tsx","features/players/selectors.ts","features/names/namesSlice.ts","features/names/selectors.ts","features/names/AutocompletePlayerName.tsx","features/players/PlayerCard.tsx","pages/Home.tsx","pages/Result.tsx","features/players/ScoreForm.tsx","pages/Score.tsx","routes.ts","pages/Settings.tsx","components/AppMenuNavigation.tsx","components/MainLayout.tsx","pages/NotFound.tsx","app/App.tsx","app/rootReducer.ts","app/store.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["createHistory","basename","shuffle","array","result","i","length","randIndex","Math","floor","random","temp","clearPath","path","replace","playersSlice","createSlice","name","initialState","reducers","createPlayer","reducer","state","action","Object","values","TOTAL_PLAYERS","usedFaction","map","faction","usedMats","mat","randomFactions","factions","filter","includes","randomMats","mats","player","id","payload","gold","popularity","stars","territories","resources","buildingBonuses","points","prepare","nanoid","editPlayer","removePlayer","omit","deletePlayers","actions","scoreFormSubmit","formData","nextPlayer","dispatch","getState","calculatePoints","players","every","history","push","routes","score","findEngNameFactionToUrl","addPlayer","a","getRouteLastAddedPlayer","useStyles","makeStyles","container","height","paperContainer","backgroundColor","backgroundImage","Image","backgroundPosition","backgroundSize","logo","marginTop","width","title","paddingTop","fontWeight","color","fontSize","textShadow","btnAddPlayer","marginBottom","First","useDispatch","classes","Paper","className","elevation","Container","fixed","Grid","direction","justify","alignItems","item","Typography","align","Button","variant","fullWidth","onClick","FactionIcon","props","iconPath","src","alt","FactionIconWithBadge","Badge","invisible","overlap","badgeContent","style","green","find","getIconPath","root","margin","maxWidth","TabPanel","children","value","index","other","role","hidden","aria-labelledby","Box","p","theme","palette","background","paper","default","paddingBottom","tab","padding","textTransform","opacity","minHeight","text","primary","swipeableViews","FullWidthTabs","useTheme","useParams","React","useState","foundPlayerIndexByFaction","setValue","useHistory","factionUrl","useRouteMatch","scoreUrl","url","useEffect","getLabel","shortName","AppBar","position","Toolbar","Tabs","onChange","event","scrollButtons","indicatorColor","Tab","component","Link","clsx","label","icon","to","threshold","hysteresis","resistance","axis","onChangeIndex","dir","media","objectPosition","FactionCharacterImage","characterPath","CardMedia","image","getPlayers","getPlayerWhoHasFirstTurn","createSelector","playerFirstTurn","getPlayersSortByFirstTurn","playerFirstTurnIndex","factionsMoveOrder","indexOf","turnOrder","reversedMoveOrder","_","nth","it","fistElement","slice","reverse","getPlayerByFaction","namesSlice","addName","deleteName","changeName","obj","getNames","names","createFilterOptions","AutocompletePlayerName","useSelector","createName","Autocomplete","newValue","inputValue","filterOptions","options","params","filtered","isNameNotEmpty","isNameUnique","isNameExist","findIndex","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","option","renderOption","display","justifyContent","IconButton","aria-label","stopPropagation","handleDeleteName","freeSolo","renderInput","TextField","size","createStyles","expand","transform","marginLeft","transition","transitions","create","duration","shortest","cardActions","cardContent","expandOpen","slider","overflow","sliderBody","textAlign","sliderImage","PlayerCard","windowWidth","useWindowWidth","expanded","setExpanded","handleChangeFaction","newFaction","target","prevFaction","isNewFactionSelect","changesPlayers","changeFactionPlayer","Card","CardContent","spacing","xs","sm","select","SelectProps","renderValue","MenuItem","newMat","prevMat","isNewMatSelect","handleChangeMat","CardActions","disableSpacing","deletePlayer","aria-expanded","Collapse","in","timeout","unmountOnExit","imgPath","Home","searchWord","findPlayerByFaction","disabled","borderCollapse","minWidth","sticky","left","zIndex","connect","playersByWinningPosition","sort","b","gameEndPosition","converted","mapKeys","TableContainer","Table","TableHead","TableRow","TableCell","resource","TableBody","scope","getShortNameFaction","forEach","setTimeout","max","schema","yup","shape","required","min","integer","typeError","ScoreForm","currentIndex","last","first","prevPlayer","foundPrevNextPlayers","useForm","defaultValues","mode","resolver","yupResolver","register","handleSubmit","errors","reset","undefined","handleOnFocus","onSubmit","autoComplete","error","helperText","message","inputRef","type","onFocus","InputProps","startAdornment","InputAdornment","Score","exact","Result","NotFound","rel","href","slug","process","dictionaryByFactionNames","keyBy","getLastAddedFaction","lastAddedPlayer","homePage","searchFaction","AppMenuNavigation","BottomNavigation","location","pathname","showLabels","BottomNavigationAction","main","MainLayout","createMuiTheme","secondary","red","light","dark","contrastText","A400","App","ThemeProvider","CssBaseline","route","rootReducer","combineReducers","persistConfig","key","version","storage","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","loading","StylesProvider","injectFirst","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.24fad718.chunk.js","sourcesContent":["import { createHashHistory as createHistory } from 'history'\r\n\r\nexport default createHistory({\r\n    basename: '/'\r\n});\r\n","export function shuffle(array: any): Array<any> {\r\n    const result = [...array];\r\n    for (let i = result.length - 1; i > 0; i--) {\r\n        let randIndex = Math.floor(Math.random() * (i + 1));\r\n        let temp = result[i];\r\n        result[i] = result[randIndex];\r\n        result[randIndex] = temp;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function isEmpty(obj: object | null) {\r\n    return obj === null ? true : Object.keys(obj).length === 0;\r\n}\r\n\r\nexport function clearPath(path: string): string {\r\n    const firstVariant = path.replace(':id?/', '');\r\n    return firstVariant.replace(':id', '');\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport omit from 'lodash-es/omit';\r\nimport { nanoid } from 'nanoid';\r\nimport { AppThunk } from '../../app/store';\r\nimport {\r\n    calculatePoints,\r\n    factions,\r\n    findEngNameFactionToUrl,\r\n    getRouteLastAddedPlayer,\r\n    mats,\r\n    TOTAL_PLAYERS,\r\n} from '../../common/scytheLogic';\r\nimport { clearPath, shuffle } from '../../common/utils';\r\nimport history from '../../history';\r\nimport { routes } from '../../routes';\r\nimport { IPlayer, IPoints, PlayersType } from './types';\r\n\r\nconst initialState: PlayersType = {};\r\n\r\nconst playersSlice = createSlice({\r\n    name: 'players',\r\n    initialState,\r\n    reducers: {\r\n        createPlayer: {\r\n            reducer: (state, action: PayloadAction<{ id: string }>) => {\r\n                if (Object.values(state).length >= TOTAL_PLAYERS) {\r\n                    return;\r\n                }\r\n\r\n                // 1. Получить уже используемые фракции и планшеты\r\n                const usedFaction = Object.values(state).map(i => i.faction);\r\n                const usedMats = Object.values(state).map(i => i.mat);\r\n\r\n                // 2. Рандомно выберем фракции и планшеты, уберем уже используемые\r\n                const randomFactions = shuffle(factions).filter(faction => !usedFaction.includes(faction.name));\r\n                const randomMats = shuffle(mats).filter(mat => !usedMats.includes(mat.name));\r\n\r\n                // 3. Готово!\r\n                const faction = randomFactions[0].name;\r\n                const mat = randomMats[0].name;\r\n\r\n                const player = {\r\n                    id: action.payload.id,\r\n                    name: 'Player ' + (Object.values(state).length + 1),\r\n                    faction,\r\n                    mat,\r\n                    gold: 0,\r\n                    popularity: 0,\r\n                    stars: 0,\r\n                    territories: 0,\r\n                    resources: 0,\r\n                    buildingBonuses: 0,\r\n                    points: 0,\r\n                };\r\n\r\n                state[player.id] = player;\r\n            },\r\n            prepare: () => {\r\n                const id = nanoid();\r\n                return { payload: { id } };\r\n            },\r\n        },\r\n\r\n        editPlayer(state, action: PayloadAction<IPlayer>) {\r\n            return { ...state, [action.payload.id]: action.payload };\r\n        },\r\n\r\n        removePlayer(state, action: PayloadAction<string>) {\r\n            return omit(state, action.payload);\r\n        },\r\n\r\n        deletePlayers() {\r\n            return {};\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    createPlayer,\r\n    editPlayer,\r\n    removePlayer,\r\n    deletePlayers,\r\n} = playersSlice.actions;\r\n\r\nexport const scoreFormSubmit = (player: IPlayer, formData: IPoints, nextPlayer: IPlayer): AppThunk => {\r\n    return (dispatch, getState) => {\r\n        const points = calculatePoints(formData);\r\n\r\n        dispatch(editPlayer({\r\n            ...player,\r\n            ...formData,\r\n            points,\r\n        }));\r\n\r\n        const players = Object.values(getState().players);\r\n        if (players.every(player => player.points > 0)) {\r\n            history.push(routes.result.path);\r\n        } else {\r\n            history.push(`${ clearPath(routes.score.path) }${ findEngNameFactionToUrl(nextPlayer.faction) }`);\r\n        }\r\n    }\r\n}\r\n\r\nexport const addPlayer = (): AppThunk => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(createPlayer());\r\n        const players = Object.values(getState().players);\r\n        const path = getRouteLastAddedPlayer(players);\r\n        history.push(path);\r\n    };\r\n};\r\n\r\nexport const changeFactionPlayer = (player: IPlayer): AppThunk => {\r\n    return (dispatch) => {\r\n        dispatch(editPlayer(player));\r\n        history.push(`${ clearPath(routes.index.path) }${ findEngNameFactionToUrl(player.faction) }`);\r\n    };\r\n};\r\n\r\nexport const deletePlayer = (id: string): AppThunk => {\r\n    return (dispatch => {\r\n        dispatch(removePlayer(id));\r\n        history.push(clearPath(routes['index'].path));\r\n    });\r\n};\r\n\r\nexport const deleteAllPlayers = (): AppThunk => {\r\n    return (dispatch => {\r\n        dispatch(deletePlayers());\r\n        history.push('/');\r\n    });\r\n};\r\n\r\nexport default playersSlice.reducer;\r\n","import keyBy from 'lodash-es/keyBy';\r\nimport { IPlayer, IPoints } from '../features/players/types';\r\nimport { routes } from '../routes';\r\nimport { clearPath } from './utils';\r\n\r\nexport const TOTAL_PLAYERS = 5;\r\n\r\nexport const factionsMoveOrder = [\r\n    'Республика Поляния',\r\n    'Северное королевство',\r\n    'Руссветский союз',\r\n    'Крымское ханство',\r\n    'Саксонская империя',\r\n];\r\n\r\nexport type FactionType = 'polania' | 'saxony' | 'crimean' | 'nordic' | 'rusviet';\r\n\r\nexport const factions = [\r\n    {\r\n        name: 'Республика Поляния',\r\n        shortName: 'Поляния',\r\n        slug: 'polania',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/polania.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/polania.png`,\r\n    },\r\n    {\r\n        name: 'Саксонская империя',\r\n        shortName: 'Саксония',\r\n        slug: 'saxony',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/saxony.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/saxony.png`,\r\n    },\r\n    {\r\n        name: 'Крымское ханство',\r\n        shortName: 'Крым',\r\n        slug: 'crimean',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/crimean.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/crimean.png`,\r\n    },\r\n    {\r\n        name: 'Северное королевство',\r\n        shortName: 'Север',\r\n        slug: 'nordic',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/nordic.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/nordic.png`,\r\n    },\r\n    {\r\n        name: 'Руссветский союз',\r\n        shortName: 'Руссвет',\r\n        slug: 'rusviet',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/rusviet.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/rusviet.png`,\r\n    },\r\n];\r\n\r\nexport const mats = [\r\n    {\r\n        name: 'Промышленный (1)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/industrial1.jpg`,\r\n    },\r\n    {\r\n        name: 'Строительный (2)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/engineering2.jpg`,\r\n    },\r\n    {\r\n        name: 'Патриотический (3)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/patriotic3.jpg`,\r\n    },\r\n    {\r\n        name: 'Технический (4)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/mechanical4.jpg`,\r\n    },\r\n    {\r\n        name: 'Фермерский (5)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/argicultural5.jpg`,\r\n    },\r\n];\r\n\r\nexport const resources = [\r\n    { name: 'Популярность', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/popularity.png` },\r\n    { name: 'Звезд', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/stars.png` },\r\n    { name: 'Территорий', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/territories.png` },\r\n    { name: 'Ресурсов', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/resources.png` },\r\n    { name: 'Бонусов зданий', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/structureBonus.png` },\r\n    { name: 'Монет', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/gold.png` },\r\n];\r\n\r\nexport const structureBonus = [\r\n    'Количество территорий с туннелями',\r\n    'Количество озёр',\r\n    'Количество территорий с символами приключений',\r\n    'Количество территорий с туннелями и вашими зданиями',\r\n    'Количество ваших зданий построенных в один ряд',\r\n    'Количество тундр и ферм с вашими зданиями',\r\n];\r\n\r\nexport function calculatePoints(points: IPoints): number {\r\n    let result = 0;\r\n\r\n    if (points.popularity >= 0 && points.popularity <= 6) {\r\n        result = (points.stars * 3) + (points.territories * 2) + Math.floor(points.resources / 2) + points.buildingBonuses + points.gold;\r\n    } else if (points.popularity >= 7 && points.popularity <= 12) {\r\n        result = (points.stars * 4) + (points.territories * 3) + Math.floor(points.resources / 2) * 2 + points.buildingBonuses + points.gold;\r\n    } else if (points.popularity >= 13 && points.popularity <= 18) {\r\n        result = (points.stars * 5) + (points.territories * 4) + Math.floor(points.resources / 2) * 3 + points.buildingBonuses + points.gold;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function findPlayerByFaction(players: IPlayer[], searchWord: string): IPlayer {\r\n    return players.find(item => findEngNameFactionToUrl(item.faction) === searchWord) as IPlayer;\r\n}\r\n\r\nexport function findEngNameFactionToUrl(faction: string = ''): string {\r\n    const dictionaryByFactionNames = keyBy(factions, 'name');\r\n    return dictionaryByFactionNames[faction].slug ? dictionaryByFactionNames[faction].slug : '';\r\n}\r\n\r\nexport function getShortNameFaction(faction: string = ''): string {\r\n    const dictionaryByFactionNames = keyBy(factions, 'name');\r\n    return dictionaryByFactionNames[faction].shortName ? dictionaryByFactionNames[faction].shortName : '';\r\n}\r\n\r\nexport function getLastAddedFaction(players: IPlayer[]): string {\r\n    if (players.length <= 0) return '';\r\n    const lastAddedPlayer = players[players.length - 1];\r\n    return findEngNameFactionToUrl(lastAddedPlayer.faction);\r\n}\r\n\r\nexport function getRouteLastAddedPlayer(players: IPlayer[]) {\r\n    const lastAddedPlayer = players[players.length - 1];\r\n    const homePage = clearPath(routes['index'].path);\r\n    return `${ homePage }${ findEngNameFactionToUrl(lastAddedPlayer.faction) }`;\r\n}\r\n\r\nexport function findFactionWhoHasFirstTurn(players: IPlayer[]): string {\r\n    for (const mat of mats) {\r\n        const playerFirstTurn = players.find(player => player.mat === mat.name);\r\n        if (playerFirstTurn) {\r\n            return findEngNameFactionToUrl(playerFirstTurn.faction);\r\n        }\r\n    }\r\n    return '';\r\n}\r\n\r\nexport function foundPrevNextPlayers(players: IPlayer[] = [], player: IPlayer) {\r\n    const currentIndex = players.findIndex(item => item.id === player.id);\r\n\r\n    const last = players[players.length - 1];\r\n    const first = players[0];\r\n\r\n    const prevPlayer = currentIndex >= 0 && players[currentIndex - 1] ? players[currentIndex - 1] : last;\r\n    const nextPlayer = currentIndex >= 0 && players[currentIndex + 1] ? players[currentIndex + 1] : first;\r\n\r\n    return {\r\n        prevPlayer,\r\n        nextPlayer,\r\n    };\r\n}\r\n\r\n\r\nexport function foundPlayerIndexByFaction(players: IPlayer[], searchFaction: FactionType) {\r\n    const factions = players.map(player => findEngNameFactionToUrl(player.faction));\r\n    const index = factions.findIndex(faction => faction === searchFaction);\r\n    return index <= 0 ? 0 : index;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/bg.2905f7ce.jpg\";","import { Button, Container, Grid, Paper, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addPlayer } from '../features/players/playersSlice';\nimport Image from '../img/bg.jpg';\n\nconst useStyles = makeStyles({\n    container: {\n        height: '100vh',\n    },\n    paperContainer: {\n        backgroundColor: '#acacac',\n        backgroundImage: `url(${ Image })`,\n        height: '100vh',\n        backgroundPosition: 'top center',\n        backgroundSize: 'cover',\n    },\n    logo: {\n        marginTop: 20,\n        width: 120,\n        height: 120,\n    },\n    title: {\n        paddingTop: 50,\n        fontWeight: 'bold',\n        color: '#fff',\n        fontSize: 46,\n        textShadow: '0 4px 3px rgba(0, 0, 0, 0.4), 0 8px 14px rgba(0, 0, 0, 0.1), 0 18px 30px rgba(0, 0, 0, 0.1)',\n    },\n    btnAddPlayer: {\n        marginTop: 'auto',\n        marginBottom: '15vh',\n    },\n});\n\nconst First: FC = () => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    return (\n        <>\n            <Paper className={ classes.paperContainer } elevation={ 0 }>\n                <Container fixed>\n\n                    <Grid\n                        className={ classes.container }\n                        container\n                        direction=\"column\"\n                        justify={ 'center' }\n                        alignItems={ 'center' }\n                    >\n                        <Grid item>\n                            {/*<img className={ classes.logo } src={ Logo } alt=\"logo\" />*/ }\n                        </Grid>\n\n                        <Grid item>\n                            <Typography align={ 'center' } className={ classes.title }>\n                                Scythe Score Calculator\n                            </Typography>\n                        </Grid>\n\n                        <Grid className={ classes.btnAddPlayer } item>\n                            <Button\n                                variant=\"contained\" color=\"secondary\" fullWidth\n                                onClick={ () => dispatch(addPlayer()) }\n                            >\n                                Добавить игрока\n                            </Button>\n                        </Grid>\n                    </Grid>\n\n                </Container>\n            </Paper>\n        </>\n    );\n};\n\nexport default First;\n","import React, { FC } from 'react';\r\n\r\ntype Props = {\r\n    name: string;\r\n    iconPath?: string;\r\n}\r\n\r\nconst FactionIcon: FC<Props> = (props) => {\r\n    const { name, iconPath } = props;\r\n\r\n    if (!iconPath) return null;\r\n\r\n    return (\r\n        <img height={ 35 } width={ 35 } src={ iconPath } alt={ name } />\r\n    );\r\n};\r\n\r\nexport default FactionIcon;\r\n","import { Badge } from '@material-ui/core';\nimport green from '@material-ui/core/colors/green';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport React, { FC } from 'react';\nimport { factions } from '../common/scytheLogic';\nimport { IPlayer } from '../features/players/types';\nimport FactionIcon from './FactionIcon';\n\ntype FactionIconType = {\n    player: IPlayer\n}\n\nexport const FactionIconWithBadge: FC<FactionIconType> = ({ player }) => {\n    const getIconPath = (player: IPlayer) => factions.find(i => i.name === player.faction)?.iconPath;\n\n    return (\n        <Badge\n            invisible={ player.points <= 0 }\n            overlap=\"circle\"\n            color=\"default\"\n            badgeContent={ <CheckCircleIcon style={ { fontSize: 16, color: green[400] } } /> }\n        >\n            <FactionIcon name={ player.faction } iconPath={ getIconPath(player) } />\n        </Badge>\n    );\n};\n","import Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { FC } from 'react';\n\nconst useStyles = makeStyles({\n    root: {\n        height: '100%',\n        width: '100%',\n        margin: '0 auto',\n        '@media (min-width: 600px)': {\n            maxWidth: \"100%\",\n        },\n        '@media (min-width: 960px)': {\n            maxWidth: 960,\n        },\n        '@media (min-width: 1280px)': {\n            maxWidth: 1280,\n        },\n    },\n});\n\ntype Props = {\n    index: any;\n    value: any;\n    children?: React.ReactNode;\n    dir?: string;\n}\n\nexport const TabPanel: FC<Props> = (props) => {\n    const { children, value, index, ...other } = props;\n    const classes = useStyles();\n\n    return (\n        <div\n            className={ classes.root }\n            role=\"tabpanel\"\n            hidden={ value !== index }\n            id={ `full-width-tabpanel-${ index }` }\n            aria-labelledby={ `full-width-tab-${ index }` }\n            { ...other }\n        >\n            { value === index && (\n                <Box p={ 2 }>\n                    { children }\n                </Box>\n            ) }\n        </div>\n    );\n};\n","import { AppBar, Paper, Tab, Tabs, Toolbar } from '@material-ui/core';\nimport { makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport React, { FC, ReactNode, useEffect } from 'react';\nimport { Link, useHistory, useParams, useRouteMatch } from 'react-router-dom';\nimport SwipeableViews from 'react-swipeable-views';\nimport { factions, FactionType, findEngNameFactionToUrl, foundPlayerIndexByFaction } from '../common/scytheLogic';\nimport { clearPath } from '../common/utils';\nimport { IPlayer } from '../features/players/types';\nimport { routes } from '../routes';\nimport { AppMenuNavigation } from './AppMenuNavigation';\nimport { FactionIconWithBadge } from './FactionIconWithBadge';\nimport { TabPanel } from './TabPanel';\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.default,\n        width: '100%',\n        height: '100%',\n        paddingTop: 80,\n        paddingBottom: 80,\n    },\n    tab: {\n        padding: '3px 6px',\n        fontSize: '12px',\n        fontWeight: 300,\n        textTransform: 'initial',\n        opacity: 0.4,\n        minHeight: 65,\n        color: theme.palette.text.primary,\n    },\n    swipeableViews: { height: '100%' },\n}));\n\n\ntype Props = {\n    players: IPlayer[],\n    children: ReactNode\n    faction?: FactionType\n}\n\nexport const FullWidthTabs: FC<Props> = ({ children, players }) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const { id: faction } = useParams<{ id: FactionType }>();\n\n    const [value, setValue] = React.useState(foundPlayerIndexByFaction(players, faction));\n\n    const history = useHistory();\n    let factionUrl = useRouteMatch(routes.index.path);\n    let scoreUrl = useRouteMatch(routes.score.path);\n    const url = factionUrl?.path || scoreUrl?.path || '';\n\n    const handleChange = (event: React.ChangeEvent<{}>, value: number) => {\n        setValue(value);\n    };\n\n    const handleChangeIndex = (index: number) => {\n        if (index < players.length) {\n            setValue(index);\n            history.push(`${ clearPath(url) }${ findEngNameFactionToUrl(players[index].faction) }`);\n        }\n    };\n\n    useEffect(() => {\n        setValue(foundPlayerIndexByFaction(players, faction));\n    }, [faction]);\n\n    const getLabel = (player: IPlayer) => factions.find(i => i.name === player.faction)?.shortName;\n\n    return (\n        <Paper className={ classes.paper }>\n            <AppBar className={ classes.root } position=\"fixed\">\n                <div className=\"container\">\n                    <Toolbar>\n                        <Tabs\n                            value={ value }\n                            onChange={ handleChange }\n                            scrollButtons=\"auto\"\n                            variant=\"scrollable\"\n                            indicatorColor=\"secondary\"\n                        >\n                            { players.map((player: IPlayer) => (\n                                <Tab\n                                    key={ player.faction }\n                                    component={ Link }\n                                    className={ clsx(classes.tab, 'faction-tab') }\n                                    label={ getLabel(player) }\n                                    icon={ <FactionIconWithBadge player={ player } /> }\n                                    to={ `${ clearPath(url) }${ findEngNameFactionToUrl(player.faction) }` }\n                                />\n                            )) }\n                        </Tabs>\n                    </Toolbar>\n                </div>\n            </AppBar>\n\n            <SwipeableViews\n                threshold={2}\n                hysteresis={0.1}\n                resistance\n                className={ classes.swipeableViews }\n                axis={ theme.direction === 'rtl' ? 'x-reverse' : 'x' }\n                index={ value }\n                onChangeIndex={ handleChangeIndex }\n            >\n                { players.map((player, index) => (\n                    <TabPanel key={ player.faction } value={ value } index={ index } dir={ theme.direction }>\n                        { children }\n                    </TabPanel>\n                )) }\n            </SwipeableViews>\n\n            <AppMenuNavigation />\n        </Paper>\n    );\n};\n","import { CardMedia } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n    media: {\r\n        objectPosition: '50% 25%',\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    name?: string,\r\n    characterPath?: string\r\n};\r\n\r\nconst FactionCharacterImage: React.FC<Props> = (props) => {\r\n    const { name = '', characterPath = '' } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <CardMedia\r\n            component=\"img\"\r\n            height=\"140\"\r\n            className={ classes.media }\r\n            image={ characterPath }\r\n            alt={ name }\r\n            title={ name }\r\n        />\r\n    );\r\n};\r\n\r\nexport default FactionCharacterImage;\r\n","import { createSelector } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { RootState } from '../../app/rootReducer';\nimport { factionsMoveOrder, findEngNameFactionToUrl, mats } from '../../common/scytheLogic';\nimport { IPlayer } from './types';\n\nexport const getPlayers = (state: RootState) => Object.values(state.players);\n\nexport const getPlayerWhoHasFirstTurn = createSelector(\n    [getPlayers],\n    (players: IPlayer[]) => {\n        for (const mat of mats) {\n            const playerFirstTurn = players.find(player => player.mat === mat.name);\n            if (playerFirstTurn) {\n                return playerFirstTurn;\n            }\n        }\n        return null;\n    });\n\nexport const getPlayersSortByFirstTurn = createSelector(\n    [getPlayers, getPlayerWhoHasFirstTurn],\n    (players: IPlayer[], player: IPlayer | null) => {\n        const playerFirstTurnIndex = factionsMoveOrder.indexOf(player?.faction as string);\n        let turnOrder: (string | undefined)[] = [];\n\n        const isFound = playerFirstTurnIndex !== -1;\n\n        if (isFound) {\n            const reversedMoveOrder = factionsMoveOrder\n                .map((item, index) => {\n                    return _.nth(factionsMoveOrder, playerFirstTurnIndex - index);\n                })\n                .filter(faction => players.find(it => it.faction === faction));\n            const fistElement = reversedMoveOrder.slice(0, 1);\n            const other = reversedMoveOrder.slice(1, reversedMoveOrder.length).reverse();\n            turnOrder = [...fistElement, ...other];\n        }\n\n        return turnOrder.map(item => players.find(player => player.faction === item)) as IPlayer[];\n    });\n\nexport const getPlayerByFaction = (faction: string) => createSelector(\n    [getPlayers],\n    (players: IPlayer[]) => {\n        return players.find(item => findEngNameFactionToUrl(item.faction) === faction);\n    },\n);\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface INames {\n    name: string;\n    inputValue?: string;\n}\n\nconst initialState: INames[] = [];\n\nconst namesSlice = createSlice({\n    name: 'names',\n    initialState,\n    reducers: {\n        addName(state, action: PayloadAction<INames>) {\n            state.push(action.payload);\n        },\n        deleteName(state, action: PayloadAction<string>) {\n            return state.filter(({ name }) => name !== action.payload);\n        },\n        changeName(state, action: PayloadAction<string>) {\n            return state.map(obj => {\n\n                if (obj.name === action.payload) {\n                    return { ...obj, name: action.payload };\n                }\n\n                return obj;\n            });\n        },\n    },\n});\n\nexport const {\n    addName,\n    deleteName,\n    changeName,\n} = namesSlice.actions;\n\nexport default namesSlice.reducer;\n","import { RootState } from '../../app/rootReducer';\n\nexport const getNames = (state: RootState) => state.names\n","import { IconButton } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { editPlayer } from '../players/playersSlice';\nimport { getPlayerByFaction } from '../players/selectors';\nimport { addName, changeName, deleteName, INames } from './namesSlice';\nimport { getNames } from './selectors';\n\nconst filter = createFilterOptions<INames>();\n\nexport function AutocompletePlayerName() {\n    const { id } = useParams<{ id: string }>();\n    const names = useSelector(getNames);\n    const dispatch = useDispatch();\n    const player = useSelector(getPlayerByFaction(id));\n\n    const createName = (obj: INames) => {\n        dispatch(addName(obj));\n        if (player?.id) {\n            dispatch(editPlayer({ ...player, name: obj.name }));\n        }\n    };\n\n    const setName = (obj: INames) => {\n        dispatch(changeName(obj.name));\n        if (player?.id) {\n            dispatch(editPlayer({ ...player, name: obj.name }));\n        }\n    };\n\n    const handleDeleteName = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, name: string) => {\n        dispatch(deleteName(name));\n        event.stopPropagation();\n    };\n\n    return (\n        <Autocomplete\n            value={ { name: player?.name || 'Player' } }\n            onChange={ (event, newValue) => {\n                if (typeof newValue === 'string') {\n                    createName({\n                        name: newValue,\n                    });\n                } else if (newValue && newValue.inputValue) {\n                    createName({\n                        // Срабатывает, когда вводим имя\n                        name: newValue.inputValue,\n                    });\n                } else if (newValue) {\n                    if (player?.name === newValue.name) {\n                        return;\n                    }\n                    // Срабатывает, когда выбираем уже из доступных имен\n                    setName({ name: newValue.name });\n                }\n            } }\n            filterOptions={ (options, params) => {\n                const filtered = filter(options, params);\n\n                const isNameNotEmpty = params.inputValue !== '';\n                const isNameUnique = params.inputValue !== player?.name;\n                const isNameExist = names.findIndex(i => i.name === params.inputValue) === -1;\n                if (isNameNotEmpty && isNameUnique && isNameExist) {\n                    filtered.push({\n                        inputValue: params.inputValue,\n                        name: `Добавить \"${ params.inputValue }\"`,\n                    });\n                }\n\n                return filtered;\n            } }\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            options={ names }\n            getOptionLabel={ (option) => {\n                if (typeof option === 'string') {\n                    return option;\n                }\n\n                if (option?.inputValue) {\n                    return option.inputValue;\n                }\n\n                return option?.name;\n            } }\n            renderOption={ (option) => {\n                if (option.inputValue) return option.name;\n                return (\n                    <div\n                        style={ {\n                            display: 'flex',\n                            width: '100%',\n                            height: 30,\n                            justifyContent: 'space-between',\n                            alignItems: 'center',\n                        } }\n                    >\n                        <p>{ option.name }</p>\n                        <IconButton aria-label=\"delete\" onClick={ (event) => handleDeleteName(event, option.name) }>\n                            <DeleteIcon fontSize=\"small\" />\n                        </IconButton>\n                    </div>\n                );\n            } }\n            freeSolo\n            renderInput={ (params) => (\n                <TextField\n                    { ...params }\n                    label=\"Имя\"\n                    variant=\"outlined\"\n                    size=\"medium\"\n                    fullWidth\n                />\n            ) }\n        />\n    );\n}\n","import { Button, Card, CardActions, CardContent, Collapse, IconButton, MenuItem } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { useWindowWidth } from '@react-hook/window-size';\nimport clsx from 'clsx';\nimport React, { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { RootState } from '../../app/rootReducer';\nimport { factions, findEngNameFactionToUrl, mats } from '../../common/scytheLogic';\nimport FactionCharacterImage from '../../components/FactionCharacterImage';\nimport FactionIcon from '../../components/FactionIcon';\nimport { AutocompletePlayerName } from '../names/AutocompletePlayerName';\nimport { changeFactionPlayer, deletePlayer, editPlayer } from './playersSlice';\nimport { IPlayer, PlayersType } from './types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            maxWidth: 345,\n        },\n        expand: {\n            transform: 'rotate(0deg)',\n            marginLeft: 'auto',\n            transition: theme.transitions.create('transform', {\n                duration: theme.transitions.duration.shortest,\n            }),\n        },\n        cardActions: {\n            paddingBottom: 0,\n            paddingTop: 0,\n        },\n        cardContent: {\n            paddingTop: 0,\n        },\n        expandOpen: {\n            transform: 'rotate(180deg)',\n        },\n        slider: {\n            overflow: 'auto',\n            maxWidth: 1200,\n            margin: '0 auto',\n        },\n        sliderBody: {\n            overflow: 'auto',\n            width: '100%',\n            height: 350,\n            textAlign: 'center',\n        },\n        sliderImage: {\n            width: 'auto',\n            height: 345,\n        },\n    }),\n);\n\nconst PlayerCard: FunctionComponent = () => {\n    const { id = '' } = useParams<any>();\n    const windowWidth = useWindowWidth();\n\n    const classes = useStyles();\n    const [expanded, setExpanded] = React.useState(false);\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n    };\n\n    const players = useSelector<RootState, PlayersType>((state => state.players));\n    const player = useSelector<RootState, IPlayer | undefined>((state => (\n        Object.values(state.players).find(i => findEngNameFactionToUrl(i.faction) === id))));\n    const dispatch = useDispatch();\n\n    if (!player) return null;\n\n    const handleChangeFaction = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>, id: string) => {\n        const newFaction = event.target.value;\n        const prevFaction = players[id].faction;\n        const isNewFactionSelect = Object.values(players).find(player => player.faction === newFaction);\n\n        // Если мы выбрали уже задействованную фракцию, поменяем значения местами\n        if (isNewFactionSelect) {\n            const changesPlayers = { ...players[isNewFactionSelect.id], faction: prevFaction };\n            dispatch(editPlayer(changesPlayers));\n        }\n\n        const changesPlayers = { ...players[id], faction: newFaction };\n        dispatch(changeFactionPlayer(changesPlayers));\n    };\n\n    const handleChangeMat = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>, id: string) => {\n        const newMat = event.target.value;\n\n        const prevMat = players[id].mat;\n        const isNewMatSelect = Object.values(players).find(player => player.mat === newMat);\n\n        if (isNewMatSelect) {\n            const changesPlayers = { ...players[isNewMatSelect.id], mat: prevMat };\n            dispatch(editPlayer(changesPlayers));\n        }\n\n        const changesPlayers = { ...players[id], mat: newMat };\n        dispatch(editPlayer(changesPlayers));\n    };\n\n    const handleDeletePlayer = () => {\n        dispatch(deletePlayer(player.id));\n    };\n\n    return (\n        <Card>\n            <FactionCharacterImage { ...factions.find(i => i.name === player.faction) } />\n            <CardContent>\n                <Grid container spacing={ 2 } direction={ 'row' }>\n                    <Grid item xs={ 12 } sm={ 6 }>\n                        <AutocompletePlayerName />\n                    </Grid>\n\n                    <Grid item>\n                        <TextField\n                            select\n                            SelectProps={ {\n                                renderValue: (value: any) => {\n                                    const faction = factions.find(i => i.name === value);\n                                    return (\n                                        <div\n                                            style={ {\n                                                display: 'flex',\n                                                alignItems: 'center',\n                                            } }\n                                        >\n                                            { faction && <FactionIcon { ...faction } /> }\n                                        </div>);\n                                },\n                            } }\n                            label=\"Фракция\"\n                            value={ player.faction }\n                            onChange={ (event) => handleChangeFaction(event, player.id) }\n                            variant=\"outlined\"\n                            size=\"small\"\n                        >\n                            { factions.map((value) => (\n                                <MenuItem key={ value.name } value={ value.name }>\n                                    <FactionIcon { ...value } />&nbsp;&nbsp;&nbsp;{ value.name }\n                                </MenuItem>\n                            )) }\n                        </TextField>\n                    </Grid>\n\n                    <Grid item xs>\n                        <TextField\n                            select\n                            label=\"Планшет\"\n                            value={ player.mat }\n                            onChange={ (event) => handleChangeMat(event, player.id) }\n                            variant=\"outlined\"\n                            size=\"medium\"\n                            fullWidth\n                        >\n                            { mats.map((mat) => (\n                                <MenuItem key={ mat.name } value={ mat.name }>\n                                    { mat.name }\n                                </MenuItem>\n                            )) }\n                        </TextField>\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            <CardActions disableSpacing className={ classes.cardActions }>\n                <Button\n                    color=\"secondary\"\n                    size=\"medium\"\n                    onClick={ handleDeletePlayer }\n                >\n                    Удалить\n                </Button>\n\n                <IconButton\n                    className={ clsx(classes.expand, {\n                        [classes.expandOpen]: expanded,\n                    }) }\n                    onClick={ handleExpandClick }\n                    aria-expanded={ expanded }\n                    aria-label=\"show mat\"\n                >\n                    <ExpandMoreIcon />\n                </IconButton>\n            </CardActions>\n\n            <Collapse in={ expanded } timeout=\"auto\" unmountOnExit>\n                <CardContent className={ classes.cardContent }>\n                    <div className={ classes.slider } style={ { width: windowWidth - 65 } }>\n                        <div className={ classes.sliderBody }>\n                            <img\n                                className={ classes.sliderImage }\n                                src={ `${ mats.find(mat => mat.name === player.mat)?.imgPath }` }\n                                alt={ player.mat }\n                            />\n                        </div>\n                    </div>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n};\n\nexport default PlayerCard;\n","import Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport React, { FunctionComponent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { FactionType, findPlayerByFaction, getRouteLastAddedPlayer, TOTAL_PLAYERS } from '../common/scytheLogic';\nimport { FullWidthTabs } from '../components/FullWidthTabs';\nimport PlayerCard from '../features/players/PlayerCard';\nimport { addPlayer, deleteAllPlayers } from '../features/players/playersSlice';\nimport { getPlayers } from '../features/players/selectors';\n\nconst Home: FunctionComponent = () => {\n    const players = useSelector(getPlayers);\n    const dispatch = useDispatch();\n\n    // Проверка есть ли игроки или нужно показать начальную страницу\n    const { id: faction } = useParams<{ id: FactionType }>();\n    const player = findPlayerByFaction(players, faction);\n\n    if (!faction && players.length) {\n        return <Redirect to={ getRouteLastAddedPlayer(players) } />;\n    }\n\n    if (!players.length) {\n        return <Redirect to={ '/' } />;\n    }\n\n    return (\n        <FullWidthTabs players={ players } faction={ faction }>\n            <PlayerCard />\n\n            <Grid container direction=\"column\" spacing={ 2 } justify={ 'center' } style={ { paddingTop: 20 } }>\n                <Grid item>\n                    <Button\n                        variant=\"contained\" disabled={ players.length >= TOTAL_PLAYERS } color=\"secondary\" fullWidth\n                        onClick={ () => dispatch(addPlayer()) }\n                    >\n                        Добавить игрока\n                    </Button>\n                </Grid>\n\n                <Grid item>\n                    <Button\n                        variant=\"contained\" disabled={ !player } color=\"primary\" fullWidth\n                        onClick={ () => dispatch(deleteAllPlayers()) }\n                    >\n                        Новая игра\n                    </Button>\n                </Grid>\n            </Grid>\n        </FullWidthTabs>\n    );\n};\n\nexport default Home;\n","import { Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport mapKeys from 'lodash-es/mapKeys';\nimport React, { FunctionComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { RootState } from '../app/rootReducer';\nimport { getShortNameFaction, resources } from '../common/scytheLogic';\nimport MainLayout from '../components/MainLayout';\nimport { deletePlayers, editPlayer } from '../features/players/playersSlice';\nimport { PlayersType } from '../features/players/types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            borderCollapse: 'separate',\n            minWidth: 320,\n        },\n        sticky: {\n            position: 'sticky',\n            background: theme.palette.background.paper,\n            left: 0,\n            zIndex: 1,\n        }\n    })\n);\n\ntype Props = {\n    players: PlayersType;\n    editPlayer: typeof editPlayer;\n    deletePlayers: typeof deletePlayers;\n}\n\nconst Result: FunctionComponent<Props> = (props) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    const {\n        players,\n        deletePlayers,\n        editPlayer,\n    } = props;\n\n    const sortedPlayers = [...Object.values(players)].sort((a, b) => b.points - a.points);\n    const playersByWinningPosition = sortedPlayers.map((player, index) => ({ ...player, gameEndPosition: index + 1 }));\n    const converted = { ...mapKeys(playersByWinningPosition, 'id') };\n\n    const handleNewGame = () => {\n        // TODO добавить сохранение места\n        const sortedPlayers = [...Object.values(players)].sort((a, b) => b.points - a.points);\n        sortedPlayers.forEach((player, index) => editPlayer({ ...player, gameEndPosition: index + 1 }));\n\n        deletePlayers();\n        setTimeout(() => {history.push('/');}, 100);\n    };\n\n    return (\n        <MainLayout className={ 'result-page' }>\n            <TableContainer component={ Paper }>\n                <Table className={ classes.root } size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"center\" size={ 'small' }>№</TableCell>\n                            <TableCell className={ classes.sticky }>Игрок</TableCell>\n                            {\n                                resources.map(resource => (\n                                    <TableCell align=\"center\">\n                                        <img width={ 30 } height={ 30 } src={ resource.imgPath } alt={ resource.name } />\n                                    </TableCell>\n                                ))\n                            }\n                            <TableCell align=\"center\">Всего</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        { Object.values(converted).map((player) => (\n                            <TableRow key={ player.name }>\n                                <TableCell align=\"center\">{ player.gameEndPosition }</TableCell>\n                                <TableCell className={ classes.sticky } component=\"th\" scope=\"player\" size={ 'small' }>\n                                    { player.name }\n                                    <br />\n                                    { getShortNameFaction(player.faction) }\n                                    <br />\n                                    { player.mat }\n                                </TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.popularity }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.stars }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.territories }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.resources }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.buildingBonuses }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.gold }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.points }</TableCell>\n                            </TableRow>\n                        )) }\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <br />\n            <Button\n                variant=\"contained\" color=\"secondary\"\n                onClick={ handleNewGame }\n            >\n                Новая игра\n            </Button>\n        </MainLayout>\n    );\n};\n\nexport default connect(\n    (state: RootState) => ({\n        players: state.players,\n    }),\n    { deletePlayers, editPlayer },\n)(Result);\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport { Button, Grid, InputAdornment, TextField, Typography } from '@material-ui/core';\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HomeIcon from '@material-ui/icons/Home';\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\nimport StarIcon from '@material-ui/icons/Star';\nimport TerrainIcon from '@material-ui/icons/Terrain';\nimport React, { FC, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { foundPrevNextPlayers } from '../../common/scytheLogic';\nimport { scoreFormSubmit } from './playersSlice';\nimport { getPlayerByFaction, getPlayersSortByFirstTurn } from './selectors';\nimport { IPlayer, IPoints } from './types';\n\nconst text = {\n    min: `Значение не может быть отрицательным`,\n    max: (max: number) => `Значение не может быть больше ${ max }`,\n};\n\nconst schema = yup.object().shape({\n    gold: yup.number().required().min(0, text.min).integer().typeError('Введите накопленные монеты'),\n    popularity: yup.number().required().min(0, text.min).max(18, text.max(18)).integer().typeError('Введите накопленную популярность'),\n    stars: yup.number().required().min(0, text.min).max(6, text.max(6)).integer().typeError('Введите накопленные звезды'),\n    territories: yup.number().required().min(0, text.min).integer().typeError('Введите кол-во контролируемых территорий'),\n    resources: yup.number().required().min(0, text.min).integer().typeError('Введите кол-во контролируемых ресурсов'),\n    buildingBonuses: yup.number().required().min(0, text.min).max(9, text.max(9)).integer().typeError('Введите кол-во монет за бонус зданий'),\n});\n\nexport const ScoreForm: FC = () => {\n    const { id } = useParams<{ id: string }>();\n    const players = useSelector(getPlayersSortByFirstTurn);\n    const player = useSelector(getPlayerByFaction(id));\n    const dispatch = useDispatch();\n\n    const { nextPlayer } = foundPrevNextPlayers(players, player as IPlayer);\n\n    const { register, handleSubmit, errors, reset } = useForm<IPoints>({\n        defaultValues: {\n            gold: player?.gold,\n            popularity: player?.popularity,\n            stars: player?.stars,\n            territories: player?.territories,\n            resources: player?.resources,\n            buildingBonuses: player?.buildingBonuses,\n        },\n        mode: 'onSubmit',\n        resolver: yupResolver(schema),\n    });\n\n    useEffect(() => {\n        if (!player?.gold &&\n            !player?.popularity &&\n            !player?.stars &&\n            !player?.territories &&\n            !player?.resources &&\n            !player?.buildingBonuses) {\n            reset({\n                gold: undefined,\n                popularity: undefined,\n                stars: undefined,\n                territories: undefined,\n                resources: undefined,\n                buildingBonuses: undefined,\n            });\n        } else {\n            reset(player);\n        }\n    }, [reset, player]);\n\n    const onSubmit = (formData: IPoints) => {\n        if (player) {\n            dispatch(scoreFormSubmit(player, formData, nextPlayer));\n        }\n    };\n\n    const handleOnFocus = (event: React.FocusEvent<any>): void => {\n        event.target.select();\n    };\n\n    return (\n        <form onSubmit={ handleSubmit(onSubmit) } autoComplete=\"off\">\n            <Grid container direction={ 'column' } spacing={ 2 }>\n                <Grid item>\n                    <TextField\n                        error={ !!errors.gold }\n                        helperText={ (errors?.gold as any)?.message }\n                        inputRef={ register }\n                        id=\"gold\"\n                        name=\"gold\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Монеты на руках\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <MonetizationOnIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.popularity }\n                        helperText={ (errors?.popularity as any)?.message }\n                        inputRef={ register }\n                        id=\"popularity\"\n                        name=\"popularity\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Популярность\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <FavoriteIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.stars }\n                        helperText={ (errors?.stars as any)?.message }\n                        inputRef={ register }\n                        id=\"stars\"\n                        name=\"stars\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Кол-во звезд\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <StarIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.territories }\n                        helperText={ (errors?.territories as any)?.message }\n                        inputRef={ register }\n                        id=\"territories\"\n                        name=\"territories\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Территорий (фабрика дает +3)\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <TerrainIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.resources }\n                        helperText={ (errors?.resources as any)?.message }\n                        inputRef={ register }\n                        id=\"resources\"\n                        name=\"resources\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Всего ресурсов (каждый ресурс)\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <DonutLargeIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.buildingBonuses }\n                        helperText={ (errors?.buildingBonuses as any)?.message }\n                        inputRef={ register }\n                        id=\"buildingBonuses\"\n                        name=\"buildingBonuses\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Бонусы зданий\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <HomeIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <Grid container alignItems={ 'center' } justify={ 'space-between' } spacing={ 2 }>\n                        <Grid item xs={ 12 }>\n                            <Button type=\"submit\" color=\"primary\" variant=\"contained\" fullWidth>Подсчитать</Button>\n                        </Grid>\n\n                        { player?.points\n                            ? <Grid item><Typography variant={ 'h6' }>Очков: { player?.points }</Typography></Grid>\n                            : null\n                        }\n                    </Grid>\n                </Grid>\n            </Grid>\n        </form>\n    );\n};\n","import { Grid, Typography } from '@material-ui/core';\nimport React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { FactionType } from '../common/scytheLogic';\nimport { FullWidthTabs } from '../components/FullWidthTabs';\nimport { ScoreForm } from '../features/players/ScoreForm';\nimport { getPlayerByFaction, getPlayersSortByFirstTurn } from '../features/players/selectors';\nimport NotFound from './NotFound';\n\nconst Score: FC = () => {\n    const { id: faction } = useParams<{ id: FactionType }>();\n    const players = useSelector(getPlayersSortByFirstTurn);\n    const player = useSelector(getPlayerByFaction(faction));\n\n    if (!player || !players) return <NotFound />;\n\n    return (\n        <>\n            <FullWidthTabs players={ players } faction={ faction }>\n                <Grid container direction={ 'column' } spacing={ 3 } style={ { height: '100%' } }>\n                    <Grid item>\n                        <Typography variant={ 'h5' }>Игрок: { player.name }</Typography>\n                    </Grid>\n\n                    <Grid item><ScoreForm /></Grid>\n                </Grid>\n            </FullWidthTabs>\n        </>\n    );\n};\n\nexport default Score;\n","import First from './pages/First';\r\nimport Home from './pages/Home';\r\nimport NotFound from './pages/NotFound';\r\nimport Result from './pages/Result';\r\nimport Score from './pages/Score';\r\nimport Settings from './pages/Settings';\r\n\r\nexport const routes = {\r\n    'first': {\r\n        path: '/',\r\n        title: '',\r\n        exact: true,\r\n        component: First,\r\n    },\r\n    'index': {\r\n        path: '/faction/:id?/',\r\n        title: 'Фракции',\r\n        exact: false,\r\n        component: Home,\r\n    },\r\n    'score': {\r\n        path: '/score/:id?/',\r\n        title: 'Подсчет очков',\r\n        exact: true,\r\n        component: Score,\r\n    },\r\n    'result': {\r\n        path: '/result',\r\n        title: 'Итоги по окончанию игры',\r\n        exact: true,\r\n        component: Result,\r\n    },\r\n    'map': {\r\n        path: '/map',\r\n        title: 'Карта',\r\n        exact: true,\r\n        component: NotFound,\r\n    },\r\n    'settings': {\r\n        path: '/settings',\r\n        title: 'Настройки',\r\n        exact: true,\r\n        component: Settings,\r\n    },\r\n};\r\n","import { Grid, Link } from '@material-ui/core';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport React, { FunctionComponent } from 'react';\nimport MainLayout from '../components/MainLayout';\n\ninterface OwnProps {}\n\ntype Props = OwnProps;\n\nconst Settings: FunctionComponent<Props> = (props) => {\n    return (\n        <MainLayout>\n            <Grid container>\n                <Grid item>\n                    <Link rel=\"noopener\" href=\"https://github.com/justbenya/scythe-app\">\n                        <GitHubIcon fontSize={ 'large' } style={ { color: '#fff' } } />\n                    </Link>\n                </Grid>\n\n            </Grid>\n\n        </MainLayout>\n    );\n};\n\nexport default Settings;\n","import { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { RootState } from '../app/rootReducer';\r\nimport { findEngNameFactionToUrl, getLastAddedFaction } from '../common/scytheLogic';\r\nimport { clearPath } from '../common/utils';\r\nimport { getPlayerWhoHasFirstTurn } from '../features/players/selectors';\r\nimport { IPlayer } from '../features/players/types';\r\nimport { routes } from '../routes';\r\n\r\nexport const AppMenuNavigation: FC = () => {\r\n    const history = useHistory();\r\n    const players = useSelector<RootState, IPlayer[]>(state => Object.values(state.players));\r\n    const player = useSelector(getPlayerWhoHasFirstTurn);\r\n\r\n    return (\r\n        <BottomNavigation className=\"menu-footer\" value={ history.location.pathname } showLabels>\r\n            <BottomNavigationAction\r\n                icon={ <PeopleIcon /> }\r\n                component={ Link }\r\n                label=\"Игроки\"\r\n                value={ history.location.pathname.includes(clearPath(routes.index.path)) ? history.location.pathname : null }\r\n                to={ `${ clearPath(routes.index.path) }${ getLastAddedFaction(players) }` }\r\n            />\r\n\r\n            <BottomNavigationAction\r\n                disabled={ !players.length }\r\n                icon={ <DonutLargeIcon /> }\r\n                component={ Link }\r\n                label=\"Очки\"\r\n                value={ history.location.pathname.includes(clearPath(routes.score.path)) ? history.location.pathname : null }\r\n                to={ `${ clearPath(routes.score.path) }${ findEngNameFactionToUrl(player?.faction) }` }\r\n            />\r\n\r\n            <BottomNavigationAction\r\n                disabled={ !players.length }\r\n                icon={ <ListAltIcon /> }\r\n                component={ Link }\r\n                label=\"Результаты\"\r\n                value={ routes.result.path }\r\n                to={ routes.result.path }\r\n            />\r\n\r\n            {/*<BottomNavigationAction*/}\r\n            {/*    icon={ <SettingsIcon /> }*/}\r\n            {/*    component={ Link }*/}\r\n            {/*    label=\"Настройки\"*/}\r\n            {/*    value=\"/settings\"*/}\r\n            {/*    to=\"/settings\"*/}\r\n            {/*/>*/}\r\n        </BottomNavigation>\r\n    );\r\n};\r\n","import Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport React, { FC } from 'react';\r\nimport { AppMenuNavigation } from './AppMenuNavigation';\r\n\r\nconst useStyles = makeStyles({\r\n    fixed: {\r\n        '@media (min-width: 600px)': {\r\n            maxWidth: 768,\r\n        },\r\n        '@media (min-width: 960px)': {\r\n            maxWidth: 960,\r\n        },\r\n        '@media (min-width: 1280px)': {\r\n            maxWidth: 1280,\r\n        },\r\n    },\r\n    main: {\r\n        height: '100%',\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    [name: string]: any;\r\n}\r\n\r\nconst MainLayout: FC<Props> = (props) => {\r\n    const { className } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <Container fixed className={ classes.fixed }>\r\n                <main className={ clsx(classes.main, className) }>{ props.children }</main>\r\n            </Container>\r\n\r\n            <AppMenuNavigation />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainLayout;\r\n","import { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport MainLayout from '../components/MainLayout';\n\nconst NotFound: FunctionComponent = () => {\n    return (\n        <MainLayout>\n            <Typography variant={ 'h1' } align={ 'center' }>404?!</Typography>\n            <Button component={ Link } to={ '/' } variant=\"outlined\" color=\"primary\" fullWidth>\n                Вернуться на главную\n            </Button>\n        </MainLayout>\n    );\n};\n\nexport default NotFound;\n","import { createMuiTheme, CssBaseline } from '@material-ui/core';\r\nimport red from '@material-ui/core/colors/red';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { Route, Router, Switch } from 'react-router-dom';\r\nimport history from '../history';\r\nimport NotFound from '../pages/NotFound';\r\nimport { routes } from '../routes';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        secondary: red,\r\n        primary: {\r\n            main: '#FFB74D',\r\n            light: 'rgb(255, 197, 112)',\r\n            dark: 'rgb(200, 147, 89)',\r\n            contrastText: 'rgba(0, 0, 0, 0.87)',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n    },\r\n});\r\n\r\nconst App: FunctionComponent = () => (\r\n    <ThemeProvider theme={ theme }>\r\n        <CssBaseline />\r\n        <Router history={ history }>\r\n            <Switch>\r\n                { Object.values(routes).map((route: any) => <Route key={ route.path } { ...route } />) }\r\n                <Route component={ NotFound } />\r\n            </Switch>\r\n        </Router>\r\n    </ThemeProvider>\r\n);\r\n\r\nexport default App;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport names from '../features/names/namesSlice';\r\nimport players from '../features/players/playersSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n    players,\r\n    names\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default rootReducer;\r\n","import { Action, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport rootReducer, { RootState } from './rootReducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    version: 2,\r\n    storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware: getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { StylesProvider } from '@material-ui/core/styles';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './app/App';\nimport store, { persistor } from './app/store';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n    <Provider store={ store }>\n        <PersistGate loading={ null } persistor={ persistor }>\n            <StylesProvider injectFirst>\n                <App />\n            </StylesProvider>\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root'),\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}