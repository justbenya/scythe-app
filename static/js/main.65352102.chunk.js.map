{"version":3,"sources":["history.ts","common/utils.ts","features/players/playersSlice.ts","common/scytheLogic.ts","img/bg.jpg","img/logo.png","pages/First.tsx","components/FactionIcon.tsx","components/FactionIconWithBadge.tsx","components/AppMenuFactions.tsx","components/FactionCharacterImage.tsx","features/players/selectors.ts","features/names/namesSlice.ts","features/names/selectors.ts","features/names/AutocompletePlayerName.tsx","features/players/PlayerCard.tsx","pages/Home.tsx","pages/Result.tsx","features/players/ScoreForm.tsx","pages/Score.tsx","routes.ts","pages/Settings.tsx","components/AppMenuNavigation.tsx","layouts/Main.tsx","pages/NotFound.tsx","app/App.tsx","app/rootReducer.ts","app/store.ts","index.tsx"],"names":["createHistory","basename","shuffle","array","result","i","length","randIndex","Math","floor","random","temp","clearPath","path","replace","playersSlice","createSlice","name","initialState","reducers","createPlayer","reducer","state","action","Object","values","TOTAL_PLAYERS","usedFaction","map","faction","usedMats","mat","randomFactions","factions","filter","includes","randomMats","mats","player","id","payload","gold","popularity","stars","territories","resources","buildingBonuses","points","prepare","nanoid","editPlayer","removePlayer","omit","deletePlayers","actions","scoreFormSubmit","formData","nextPlayer","dispatch","getState","calculatePoints","players","every","history","push","routes","score","findEngNameFactionToUrl","addPlayer","a","getRouteLastAddedPlayer","useStyles","makeStyles","container","height","paperContainer","backgroundColor","backgroundImage","Image","backgroundPosition","backgroundSize","logo","marginTop","width","title","fontWeight","fontSize","btnAddPlayer","marginBottom","First","useDispatch","classes","CssBaseline","Paper","className","elevation","Container","fixed","Grid","direction","justify","alignItems","item","src","Logo","alt","Typography","align","Button","variant","color","fullWidth","onClick","FactionIcon","props","iconPath","FactionIconWithBadge","Badge","invisible","overlap","badgeContent","style","green","find","getIconPath","toolbar","padding","textTransform","opacity","minHeight","AppMenuFactions","useHistory","factionUrl","useRouteMatch","index","scoreUrl","url","getLabel","shortName","AppBar","position","Toolbar","Tabs","scrollButtons","indicatorColor","value","location","pathname","Tab","icon","label","component","Link","to","media","objectPosition","FactionCharacterImage","characterPath","CardMedia","image","getPlayers","getPlayerWhoHasFirstTurn","createSelector","playerFirstTurn","getPlayersSortByFirstTurn","playerFirstTurnIndex","factionsMoveOrder","indexOf","turnOrder","reversedMoveOrder","_","nth","it","fistElement","slice","other","reverse","getPlayerByFaction","namesSlice","addName","deleteName","changeName","obj","getNames","names","createFilterOptions","AutocompletePlayerName","useParams","useSelector","createName","Autocomplete","onChange","event","newValue","inputValue","filterOptions","options","params","filtered","isNameNotEmpty","isNameUnique","isNameExist","findIndex","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","option","renderOption","display","justifyContent","IconButton","aria-label","stopPropagation","handleDeleteName","freeSolo","renderInput","TextField","size","theme","createStyles","root","maxWidth","expand","transform","marginLeft","transition","transitions","create","duration","shortest","cardActions","paddingBottom","paddingTop","cardContent","expandOpen","slider","overflow","margin","sliderBody","textAlign","sliderImage","PlayerCard","windowWidth","useWindowWidth","React","useState","expanded","setExpanded","handleChangeFaction","newFaction","target","prevFaction","isNewFactionSelect","changesPlayers","changeFactionPlayer","Card","CardContent","spacing","xs","sm","select","SelectProps","renderValue","MenuItem","newMat","prevMat","isNewMatSelect","handleChangeMat","CardActions","disableSpacing","deletePlayer","clsx","aria-expanded","Collapse","in","timeout","unmountOnExit","imgPath","connect","deleteAllPlayers","searchWord","findPlayerByFaction","disabled","table","minWidth","sticky","background","left","zIndex","playersByWinningPosition","sort","b","gameEndPosition","converted","mapKeys","TableContainer","Table","TableHead","TableRow","TableCell","resource","TableBody","scope","getShortNameFaction","forEach","setTimeout","text","max","schema","yup","shape","required","min","integer","typeError","ScoreForm","foundPrevNextPlayers","useForm","defaultValues","mode","resolver","yupResolver","register","handleSubmit","errors","reset","useEffect","undefined","firstInput","useRef","current","focus","handleOnFocus","onSubmit","autoComplete","error","helperText","message","inputRef","e","type","onFocus","InputProps","startAdornment","InputAdornment","Score","prevPlayer","prevPlayerPath","nextPlayerPath","Boolean","edge","exact","Home","Result","NotFound","rel","href","slug","process","dictionaryByFactionNames","keyBy","getLastAddedFaction","lastAddedPlayer","homePage","currentIndex","last","first","AppMenuNavigation","BottomNavigation","showLabels","BottomNavigationAction","main","Main","children","App","route","rootReducer","combineReducers","persistConfig","key","version","storage","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","loading","StylesProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.65352102.chunk.js","sourcesContent":["import { createHashHistory as createHistory } from 'history'\r\n\r\nexport default createHistory({\r\n    basename: '/'\r\n});\r\n","export function shuffle(array: any): Array<any> {\r\n    const result = [...array];\r\n    for (let i = result.length - 1; i > 0; i--) {\r\n        let randIndex = Math.floor(Math.random() * (i + 1));\r\n        let temp = result[i];\r\n        result[i] = result[randIndex];\r\n        result[randIndex] = temp;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function isEmpty(obj: object | null) {\r\n    return obj === null ? true : Object.keys(obj).length === 0;\r\n}\r\n\r\nexport function clearPath(path: string): string {\r\n    const firstVariant = path.replace(':id?/', '');\r\n    return firstVariant.replace(':id', '');\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport omit from 'lodash-es/omit';\r\nimport { nanoid } from 'nanoid';\r\nimport { AppThunk } from '../../app/store';\r\nimport {\r\n    calculatePoints,\r\n    factions,\r\n    findEngNameFactionToUrl,\r\n    getRouteLastAddedPlayer,\r\n    mats,\r\n    TOTAL_PLAYERS,\r\n} from '../../common/scytheLogic';\r\nimport { clearPath, shuffle } from '../../common/utils';\r\nimport history from '../../history';\r\nimport { routes } from '../../routes';\r\nimport { IPlayer, IPoints, PlayersType } from './types';\r\n\r\nconst initialState: PlayersType = {};\r\n\r\nconst playersSlice = createSlice({\r\n    name: 'players',\r\n    initialState,\r\n    reducers: {\r\n        createPlayer: {\r\n            reducer: (state, action: PayloadAction<{ id: string }>) => {\r\n                if (Object.values(state).length >= TOTAL_PLAYERS) {\r\n                    return;\r\n                }\r\n\r\n                // 1. Получить уже используемые фракции и планшеты\r\n                const usedFaction = Object.values(state).map(i => i.faction);\r\n                const usedMats = Object.values(state).map(i => i.mat);\r\n\r\n                // 2. Рандомно выберем фракции и планшеты, уберем уже используемые\r\n                const randomFactions = shuffle(factions).filter(faction => !usedFaction.includes(faction.name));\r\n                const randomMats = shuffle(mats).filter(mat => !usedMats.includes(mat.name));\r\n\r\n                // 3. Готово!\r\n                const faction = randomFactions[0].name;\r\n                const mat = randomMats[0].name;\r\n\r\n                const player = {\r\n                    id: action.payload.id,\r\n                    name: 'Player ' + (Object.values(state).length + 1),\r\n                    faction,\r\n                    mat,\r\n                    gold: 0,\r\n                    popularity: 0,\r\n                    stars: 0,\r\n                    territories: 0,\r\n                    resources: 0,\r\n                    buildingBonuses: 0,\r\n                    points: 0,\r\n                };\r\n\r\n                state[player.id] = player;\r\n            },\r\n            prepare: () => {\r\n                const id = nanoid();\r\n                return { payload: { id } };\r\n            },\r\n        },\r\n\r\n        editPlayer(state, action: PayloadAction<IPlayer>) {\r\n            return { ...state, [action.payload.id]: action.payload };\r\n        },\r\n\r\n        removePlayer(state, action: PayloadAction<string>) {\r\n            return omit(state, action.payload);\r\n        },\r\n\r\n        deletePlayers() {\r\n            return {};\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    createPlayer,\r\n    editPlayer,\r\n    removePlayer,\r\n    deletePlayers,\r\n} = playersSlice.actions;\r\n\r\nexport const scoreFormSubmit = (player: IPlayer, formData: IPoints, nextPlayer: IPlayer): AppThunk => {\r\n    return (dispatch, getState) => {\r\n        const points = calculatePoints(formData);\r\n\r\n        dispatch(editPlayer({\r\n            ...player,\r\n            ...formData,\r\n            points,\r\n        }));\r\n\r\n        const players = Object.values(getState().players);\r\n        if (players.every(player => player.points > 0)) {\r\n            history.push(routes.result.path);\r\n        } else {\r\n            history.push(`${ clearPath(routes.score.path) }${ findEngNameFactionToUrl(nextPlayer.faction) }`);\r\n        }\r\n    }\r\n}\r\n\r\nexport const addPlayer = (): AppThunk => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(createPlayer());\r\n        const players = Object.values(getState().players);\r\n        const path = getRouteLastAddedPlayer(players);\r\n        history.push(path);\r\n    };\r\n};\r\n\r\nexport const changeFactionPlayer = (player: IPlayer): AppThunk => {\r\n    return (dispatch) => {\r\n        dispatch(editPlayer(player));\r\n        history.push(`${ clearPath(routes.index.path) }${ findEngNameFactionToUrl(player.faction) }`);\r\n    };\r\n};\r\n\r\nexport const deletePlayer = (id: string): AppThunk => {\r\n    return (dispatch => {\r\n        dispatch(removePlayer(id));\r\n        history.push(clearPath(routes['index'].path));\r\n    });\r\n};\r\n\r\nexport const deleteAllPlayers = (): AppThunk => {\r\n    return (dispatch => {\r\n        dispatch(deletePlayers());\r\n        history.push('/');\r\n    });\r\n};\r\n\r\nexport default playersSlice.reducer;\r\n","import keyBy from 'lodash-es/keyBy';\r\nimport { IPlayer, IPoints } from '../features/players/types';\r\nimport { routes } from '../routes';\r\nimport { clearPath } from './utils';\r\n\r\nexport const TOTAL_PLAYERS = 5;\r\n\r\nexport const factionsMoveOrder = [\r\n    'Республика Поляния',\r\n    'Северное королевство',\r\n    'Руссветский союз',\r\n    'Крымское ханство',\r\n    'Саксонская империя',\r\n];\r\n\r\nexport const factions = [\r\n    {\r\n        name: 'Республика Поляния',\r\n        shortName: 'Поляния',\r\n        slug: 'polania',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/polania.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/polania.png`,\r\n    },\r\n    {\r\n        name: 'Саксонская империя',\r\n        shortName: 'Саксония',\r\n        slug: 'saxony',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/saxony.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/saxony.png`,\r\n    },\r\n    {\r\n        name: 'Крымское ханство',\r\n        shortName: 'Крым',\r\n        slug: 'crimean',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/crimean.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/crimean.png`,\r\n    },\r\n    {\r\n        name: 'Северное королевство',\r\n        shortName: 'Север',\r\n        slug: 'nordic',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/nordic.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/nordic.png`,\r\n    },\r\n    {\r\n        name: 'Руссветский союз',\r\n        shortName: 'Руссвет',\r\n        slug: 'rusvet',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/rusvet.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/rusvet.png`,\r\n    },\r\n];\r\n\r\nexport const mats = [\r\n    {\r\n        name: 'Промышленный (1)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/industrial1.jpg`,\r\n    },\r\n    {\r\n        name: 'Строительный (2)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/engineering2.jpg`,\r\n    },\r\n    {\r\n        name: 'Патриотический (3)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/patriotic3.jpg`,\r\n    },\r\n    {\r\n        name: 'Технический (4)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/mechanical4.jpg`,\r\n    },\r\n    {\r\n        name: 'Фермерский (5)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/argicultural5.jpg`,\r\n    },\r\n];\r\n\r\nexport const resources = [\r\n    { name: 'Популярность', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/popularity.png` },\r\n    { name: 'Звезд', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/stars.png` },\r\n    { name: 'Территорий', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/territories.png` },\r\n    { name: 'Ресурсов', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/resources.png` },\r\n    { name: 'Бонусов зданий', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/structureBonus.png` },\r\n    { name: 'Монет', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/gold.png` },\r\n];\r\n\r\nexport const structureBonus = [\r\n    'Количество территорий с туннелями',\r\n    'Количество озёр',\r\n    'Количество территорий с символами приключений',\r\n    'Количество территорий с туннелями и вашими зданиями',\r\n    'Количество ваших зданий построенных в один ряд',\r\n    'Количество тундр и ферм с вашими зданиями',\r\n];\r\n\r\nexport function calculatePoints(points: IPoints): number {\r\n    let result = 0;\r\n\r\n    if (points.popularity >= 0 && points.popularity <= 6) {\r\n        result = (points.stars * 3) + (points.territories * 2) + Math.floor(points.resources / 2) + points.buildingBonuses + points.gold;\r\n    } else if (points.popularity >= 7 && points.popularity <= 12) {\r\n        result = (points.stars * 4) + (points.territories * 3) + Math.floor(points.resources / 2) * 2 + points.buildingBonuses + points.gold;\r\n    } else if (points.popularity >= 13 && points.popularity <= 18) {\r\n        result = (points.stars * 5) + (points.territories * 4) + Math.floor(points.resources / 2) * 3 + points.buildingBonuses + points.gold;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function findPlayerByFaction(players: IPlayer[], searchWord: string): IPlayer {\r\n    return players.find(item => findEngNameFactionToUrl(item.faction) === searchWord) as IPlayer;\r\n}\r\n\r\nexport function findEngNameFactionToUrl(faction: string = ''): string {\r\n    const dictionaryByFactionNames = keyBy(factions, 'name');\r\n    return dictionaryByFactionNames[faction].slug ? dictionaryByFactionNames[faction].slug : '';\r\n}\r\n\r\nexport function getShortNameFaction(faction: string = ''): string {\r\n    const dictionaryByFactionNames = keyBy(factions, 'name');\r\n    return dictionaryByFactionNames[faction].shortName ? dictionaryByFactionNames[faction].shortName : '';\r\n}\r\n\r\nexport function getLastAddedFaction(players: IPlayer[]): string {\r\n    if (players.length <= 0) return '';\r\n    const lastAddedPlayer = players[players.length - 1];\r\n    return findEngNameFactionToUrl(lastAddedPlayer.faction);\r\n}\r\n\r\nexport function getRouteLastAddedPlayer(players: IPlayer[]) {\r\n    const lastAddedPlayer = players[players.length - 1];\r\n    const homePage = clearPath(routes['index'].path);\r\n    return `${ homePage }${ findEngNameFactionToUrl(lastAddedPlayer.faction) }`;\r\n}\r\n\r\nexport function findFactionWhoHasFirstTurn(players: IPlayer[]): string {\r\n    for (const mat of mats) {\r\n        const playerFirstTurn = players.find(player => player.mat === mat.name);\r\n        if (playerFirstTurn) {\r\n            return findEngNameFactionToUrl(playerFirstTurn.faction);\r\n        }\r\n    }\r\n    return '';\r\n}\r\n\r\nexport function foundPrevNextPlayers(players: IPlayer[] = [], player: IPlayer) {\r\n    const currentIndex = players.findIndex(item => item.id === player.id);\r\n\r\n    const last = players[players.length - 1];\r\n    const first = players[0];\r\n\r\n    const prevPlayer = currentIndex >= 0 && players[currentIndex - 1] ? players[currentIndex - 1] : last;\r\n    const nextPlayer = currentIndex >= 0 && players[currentIndex + 1] ? players[currentIndex + 1] : first;\r\n\r\n    return {\r\n        prevPlayer,\r\n        nextPlayer,\r\n    };\r\n}\r\n","export default __webpack_public_path__ + \"static/media/bg.3716f9d7.jpg\";","export default __webpack_public_path__ + \"static/media/logo.dd1ac0f7.png\";","import { Button, Container, CssBaseline, Grid, Paper, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addPlayer } from '../features/players/playersSlice';\nimport Image from '../img/bg.jpg';\nimport Logo from '../img/logo.png';\n\nconst useStyles = makeStyles({\n    container: {\n        height: '100vh',\n    },\n    paperContainer: {\n        backgroundColor: '#acacac',\n        backgroundImage: `url(${ Image })`,\n        height: '100vh',\n        backgroundPosition: 'top center',\n        backgroundSize: 'cover',\n    },\n    logo: {\n        marginTop: 20,\n        width: 120,\n        height: 120,\n    },\n    title: {\n        fontWeight: 'bold',\n        fontSize: 21,\n    },\n    btnAddPlayer: {\n        marginTop: 'auto',\n        marginBottom: 50,\n    },\n});\n\nconst First: FC = () => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    return (\n        <>\n            <CssBaseline />\n\n            <Paper className={ classes.paperContainer } elevation={ 0 }>\n                <Container fixed>\n\n                    <Grid\n                        className={ classes.container }\n                        container\n                        direction=\"column\"\n                        justify={ 'center' }\n                        alignItems={ 'center' }\n                    >\n                        <Grid item>\n                            <img className={ classes.logo } src={ Logo } alt=\"logo\" />\n                        </Grid>\n\n                        <Grid item>\n                            <Typography align={ 'center' } className={ classes.title }>\n                                Scythe Score Calculator\n                            </Typography>\n                        </Grid>\n\n                        <Grid className={ classes.btnAddPlayer } item>\n                            <Button\n                                variant=\"contained\" color=\"secondary\" fullWidth\n                                onClick={ () => dispatch(addPlayer()) }\n                            >\n                                Добавить игрока\n                            </Button>\n                        </Grid>\n                    </Grid>\n\n                </Container>\n            </Paper>\n        </>\n    );\n};\n\nexport default First;\n","import React, { FC } from 'react';\r\n\r\ntype Props = {\r\n    name: string;\r\n    iconPath?: string;\r\n}\r\n\r\nconst FactionIcon: FC<Props> = (props) => {\r\n    const { name, iconPath } = props;\r\n\r\n    if (!iconPath) return null;\r\n\r\n    return (\r\n        <img height={ 35 } src={ iconPath } alt={ name } />\r\n    );\r\n};\r\n\r\nexport default FactionIcon;\r\n","import { Badge } from '@material-ui/core';\nimport green from '@material-ui/core/colors/green';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport React, { FC } from 'react';\nimport { factions } from '../common/scytheLogic';\nimport { IPlayer } from '../features/players/types';\nimport FactionIcon from './FactionIcon';\n\ntype FactionIconType = {\n    player: IPlayer\n}\n\nexport const FactionIconWithBadge: FC<FactionIconType> = ({ player }) => {\n    const getIconPath = (player: IPlayer) => factions.find(i => i.name === player.faction)?.iconPath;\n\n    return (\n        <Badge\n            invisible={ player.points <= 0 }\n            overlap=\"circle\"\n            color=\"default\"\n            badgeContent={ <CheckCircleIcon style={ { fontSize: 16, color: green[400] } } /> }\n        >\n            <FactionIcon name={ player.faction } iconPath={ getIconPath(player) } />\n        </Badge>\n    );\n};\n","import { AppBar, Tab, Tabs, Toolbar } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React, { FC } from 'react';\r\nimport { Link, useHistory, useRouteMatch } from 'react-router-dom';\r\nimport { factions, findEngNameFactionToUrl } from '../common/scytheLogic';\r\nimport { clearPath } from '../common/utils';\r\nimport { IPlayer } from '../features/players/types';\r\nimport { routes } from '../routes';\r\nimport { FactionIconWithBadge } from './FactionIconWithBadge';\r\n\r\nconst useStyles = makeStyles({\r\n    toolbar: {\r\n        padding: '3px 6px',\r\n        fontSize: '12px',\r\n        fontWeight: 300,\r\n        textTransform: 'initial',\r\n        opacity: 0.4,\r\n        minHeight: 65,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    players: IPlayer[];\r\n};\r\n\r\nexport const AppMenuFactions: FC<Props> = (props) => {\r\n    const { players } = props;\r\n    const classes = useStyles();\r\n\r\n    const history = useHistory();\r\n    let factionUrl = useRouteMatch(routes.index.path);\r\n    let scoreUrl = useRouteMatch(routes.score.path);\r\n    const url = factionUrl?.path || scoreUrl?.path || '';\r\n\r\n    const getLabel = (player: IPlayer) => factions.find(i => i.name === player.faction)?.shortName;\r\n\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\">\r\n            <div className=\"container\">\r\n                <Toolbar>\r\n                    { players.length\r\n                        ? <Tabs\r\n                            variant=\"scrollable\"\r\n                            scrollButtons=\"auto\"\r\n                            indicatorColor=\"secondary\"\r\n                            value={ history.location.pathname }\r\n                        >\r\n                            { players.map((player: IPlayer) => (\r\n                                <Tab\r\n                                    className={ classes.toolbar + ' faction-tab' }\r\n                                    icon={ <FactionIconWithBadge player={ player } /> }\r\n                                    label={ getLabel(player) }\r\n                                    key={ player.faction }\r\n                                    component={ Link }\r\n                                    value={ `${ clearPath(url) }${ findEngNameFactionToUrl(player.faction) }` }\r\n                                    to={ `${ clearPath(url) }${ findEngNameFactionToUrl(player.faction) }` }\r\n                                />\r\n                            )) }\r\n                        </Tabs>\r\n                        : null }\r\n                </Toolbar>\r\n            </div>\r\n        </AppBar>\r\n\r\n    );\r\n};\r\n","import { CardMedia } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n    media: {\r\n        objectPosition: '50% 25%',\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    name?: string,\r\n    characterPath?: string\r\n};\r\n\r\nconst FactionCharacterImage: React.FC<Props> = (props) => {\r\n    const { name = '', characterPath = '' } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <CardMedia\r\n            component=\"img\"\r\n            height=\"140\"\r\n            className={ classes.media }\r\n            image={ characterPath }\r\n            alt={ name }\r\n            title={ name }\r\n        />\r\n    );\r\n};\r\n\r\nexport default FactionCharacterImage;\r\n","import { createSelector } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { RootState } from '../../app/rootReducer';\nimport { factionsMoveOrder, findEngNameFactionToUrl, mats } from '../../common/scytheLogic';\nimport { IPlayer } from './types';\n\nexport const getPlayers = (state: RootState) => Object.values(state.players);\n\nexport const getPlayerWhoHasFirstTurn = createSelector(\n    [getPlayers],\n    (players: IPlayer[]) => {\n        for (const mat of mats) {\n            const playerFirstTurn = players.find(player => player.mat === mat.name);\n            if (playerFirstTurn) {\n                return playerFirstTurn;\n            }\n        }\n        return null;\n    });\n\nexport const getPlayersSortByFirstTurn = createSelector(\n    [getPlayers, getPlayerWhoHasFirstTurn],\n    (players: IPlayer[], player: IPlayer | null) => {\n        const playerFirstTurnIndex = factionsMoveOrder.indexOf(player?.faction as string);\n        let turnOrder: (string | undefined)[] = [];\n\n        const isFound = playerFirstTurnIndex !== -1;\n\n        if (isFound) {\n            const reversedMoveOrder = factionsMoveOrder\n                .map((item, index) => {\n                    return _.nth(factionsMoveOrder, playerFirstTurnIndex - index);\n                })\n                .filter(faction => players.find(it => it.faction === faction));\n            const fistElement = reversedMoveOrder.slice(0, 1);\n            const other = reversedMoveOrder.slice(1, reversedMoveOrder.length).reverse();\n            turnOrder = [...fistElement, ...other];\n        }\n\n        return turnOrder.map(item => players.find(player => player.faction === item)) as IPlayer[];\n    });\n\nexport const getPlayerByFaction = (faction: string) => createSelector(\n    [getPlayers],\n    (players: IPlayer[]) => {\n        return players.find(item => findEngNameFactionToUrl(item.faction) === faction);\n    },\n);\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface INames {\n    name: string;\n    inputValue?: string;\n}\n\nconst initialState: INames[] = [];\n\nconst namesSlice = createSlice({\n    name: 'names',\n    initialState,\n    reducers: {\n        addName(state, action: PayloadAction<INames>) {\n            state.push(action.payload);\n        },\n        deleteName(state, action: PayloadAction<string>) {\n            return state.filter(({ name }) => name !== action.payload);\n        },\n        changeName(state, action: PayloadAction<string>) {\n            return state.map(obj => {\n\n                if (obj.name === action.payload) {\n                    return { ...obj, name: action.payload };\n                }\n\n                return obj;\n            });\n        },\n    },\n});\n\nexport const {\n    addName,\n    deleteName,\n    changeName,\n} = namesSlice.actions;\n\nexport default namesSlice.reducer;\n","import { RootState } from '../../app/rootReducer';\n\nexport const getNames = (state: RootState) => state.names\n","import { IconButton } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { editPlayer } from '../players/playersSlice';\nimport { getPlayerByFaction } from '../players/selectors';\nimport { addName, changeName, deleteName, INames } from './namesSlice';\nimport { getNames } from './selectors';\n\nconst filter = createFilterOptions<INames>();\n\nexport function AutocompletePlayerName() {\n    const { id } = useParams<{ id: string }>();\n    const names = useSelector(getNames);\n    const dispatch = useDispatch();\n    const player = useSelector(getPlayerByFaction(id));\n\n    const createName = (obj: INames) => {\n        dispatch(addName(obj));\n        if (player?.id) {\n            dispatch(editPlayer({ ...player, name: obj.name }));\n        }\n    };\n\n    const setName = (obj: INames) => {\n        dispatch(changeName(obj.name));\n        if (player?.id) {\n            dispatch(editPlayer({ ...player, name: obj.name }));\n        }\n    };\n\n    const handleDeleteName = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, name: string) => {\n        dispatch(deleteName(name));\n        event.stopPropagation();\n    };\n\n    return (\n        <Autocomplete\n            value={ { name: player?.name || 'Player' } }\n            onChange={ (event, newValue) => {\n                if (typeof newValue === 'string') {\n                    createName({\n                        name: newValue,\n                    });\n                } else if (newValue && newValue.inputValue) {\n                    createName({\n                        // Срабатывает, когда вводим имя\n                        name: newValue.inputValue,\n                    });\n                } else if (newValue) {\n                    if (player?.name === newValue.name) {\n                        return;\n                    }\n                    // Срабатывает, когда выбираем уже из доступных имен\n                    setName({ name: newValue.name });\n                }\n            } }\n            filterOptions={ (options, params) => {\n                const filtered = filter(options, params);\n\n                const isNameNotEmpty = params.inputValue !== '';\n                const isNameUnique = params.inputValue !== player?.name;\n                const isNameExist = names.findIndex(i => i.name === params.inputValue) === -1;\n                if (isNameNotEmpty && isNameUnique && isNameExist) {\n                    filtered.push({\n                        inputValue: params.inputValue,\n                        name: `Добавить \"${ params.inputValue }\"`,\n                    });\n                }\n\n                return filtered;\n            } }\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            options={ names }\n            getOptionLabel={ (option) => {\n                if (typeof option === 'string') {\n                    return option;\n                }\n\n                if (option?.inputValue) {\n                    return option.inputValue;\n                }\n\n                return option?.name;\n            } }\n            renderOption={ (option) => {\n                if (option.inputValue) return option.name;\n                return (\n                    <div\n                        style={ {\n                            display: 'flex',\n                            width: '100%',\n                            height: 30,\n                            justifyContent: 'space-between',\n                            alignItems: 'center',\n                        } }\n                    >\n                        <p>{ option.name }</p>\n                        <IconButton aria-label=\"delete\" onClick={ (event) => handleDeleteName(event, option.name) }>\n                            <DeleteIcon fontSize=\"small\" />\n                        </IconButton>\n                    </div>\n                );\n            } }\n            freeSolo\n            renderInput={ (params) => (\n                <TextField\n                    { ...params }\n                    label=\"Имя\"\n                    variant=\"outlined\"\n                    size=\"medium\"\n                    fullWidth\n                />\n            ) }\n        />\n    );\n}\n","import { Button, Card, CardActions, CardContent, Collapse, IconButton, MenuItem } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { useWindowWidth } from '@react-hook/window-size';\r\nimport clsx from 'clsx';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { RootState } from '../../app/rootReducer';\r\nimport { factions, findEngNameFactionToUrl, mats } from '../../common/scytheLogic';\r\nimport FactionCharacterImage from '../../components/FactionCharacterImage';\r\nimport FactionIcon from '../../components/FactionIcon';\r\nimport { AutocompletePlayerName } from '../names/AutocompletePlayerName';\r\nimport { changeFactionPlayer, deletePlayer, editPlayer } from './playersSlice';\r\nimport { IPlayer, PlayersType } from './types';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            maxWidth: 345,\r\n        },\r\n        expand: {\r\n            transform: 'rotate(0deg)',\r\n            marginLeft: 'auto',\r\n            transition: theme.transitions.create('transform', {\r\n                duration: theme.transitions.duration.shortest,\r\n            }),\r\n        },\r\n        cardActions: {\r\n            paddingBottom: 0,\r\n            paddingTop: 0,\r\n        },\r\n        cardContent: {\r\n            paddingTop: 0,\r\n        },\r\n        expandOpen: {\r\n            transform: 'rotate(180deg)',\r\n        },\r\n        slider: {\r\n            overflow: 'auto',\r\n            maxWidth: 1200,\r\n            margin: '0 auto',\r\n        },\r\n        sliderBody: {\r\n            overflow: 'auto',\r\n            width: '100%',\r\n            height: 350,\r\n            textAlign: 'center',\r\n        },\r\n        sliderImage: {\r\n            width: 'auto',\r\n            height: 345,\r\n        },\r\n    }),\r\n);\r\n\r\nconst PlayerCard: FunctionComponent = () => {\r\n    const { id = '' } = useParams<any>();\r\n    const windowWidth = useWindowWidth();\r\n\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const players = useSelector<RootState, PlayersType>((state => state.players));\r\n    const player = useSelector<RootState, IPlayer | undefined>((state => (\r\n        Object.values(state.players).find(i => findEngNameFactionToUrl(i.faction) === id))));\r\n    const dispatch = useDispatch();\r\n\r\n    if (!player) return null;\r\n\r\n    const handleChangeFaction = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>, id: string) => {\r\n        const newFaction = event.target.value;\r\n        const prevFaction = players[id].faction;\r\n        const isNewFactionSelect = Object.values(players).find(player => player.faction === newFaction);\r\n\r\n        // Если мы выбрали уже задействованную фракцию, поменяем значения местами\r\n        if (isNewFactionSelect) {\r\n            const changesPlayers = { ...players[isNewFactionSelect.id], faction: prevFaction };\r\n            dispatch(editPlayer(changesPlayers));\r\n        }\r\n\r\n        const changesPlayers = { ...players[id], faction: newFaction };\r\n        dispatch(changeFactionPlayer(changesPlayers));\r\n    };\r\n\r\n    const handleChangeMat = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>, id: string) => {\r\n        const newMat = event.target.value;\r\n\r\n        const prevMat = players[id].mat;\r\n        const isNewMatSelect = Object.values(players).find(player => player.mat === newMat);\r\n\r\n        if (isNewMatSelect) {\r\n            const changesPlayers = { ...players[isNewMatSelect.id], mat: prevMat };\r\n            dispatch(editPlayer(changesPlayers));\r\n        }\r\n\r\n        const changesPlayers = { ...players[id], mat: newMat };\r\n        dispatch(editPlayer(changesPlayers));\r\n    };\r\n\r\n    const handleDeletePlayer = () => {\r\n        dispatch(deletePlayer(player.id));\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <FactionCharacterImage { ...factions.find(i => i.name === player.faction) } />\r\n            <CardContent>\r\n                <Grid container spacing={ 2 } direction={ 'row' }>\r\n                    <Grid item xs={ 12 } sm={ 6 }>\r\n                        <AutocompletePlayerName />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <TextField\r\n                            select\r\n                            SelectProps={ {\r\n                                renderValue: (value: any) => {\r\n                                    const faction = factions.find(i => i.name === value);\r\n                                    return (\r\n                                        <div\r\n                                            style={ {\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                            } }\r\n                                        >\r\n                                            { faction && <FactionIcon { ...faction } /> }\r\n                                        </div>);\r\n                                },\r\n                            } }\r\n                            label=\"Фракция\"\r\n                            value={ player.faction }\r\n                            onChange={ (event) => handleChangeFaction(event, player.id) }\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                        >\r\n                            { factions.map((value) => (\r\n                                <MenuItem key={ value.name } value={ value.name }>\r\n                                    <FactionIcon { ...value } />&nbsp;&nbsp;&nbsp;{ value.name }\r\n                                </MenuItem>\r\n                            )) }\r\n                        </TextField>\r\n                    </Grid>\r\n\r\n                    <Grid item xs>\r\n                        <TextField\r\n                            select\r\n                            label=\"Планшет\"\r\n                            value={ player.mat }\r\n                            onChange={ (event) => handleChangeMat(event, player.id) }\r\n                            variant=\"outlined\"\r\n                            size=\"medium\"\r\n                            fullWidth\r\n                        >\r\n                            { mats.map((mat) => (\r\n                                <MenuItem key={ mat.name } value={ mat.name }>\r\n                                    { mat.name }\r\n                                </MenuItem>\r\n                            )) }\r\n                        </TextField>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n\r\n            <CardActions disableSpacing className={ classes.cardActions }>\r\n                <Button\r\n                    color=\"secondary\"\r\n                    size=\"medium\"\r\n                    onClick={ handleDeletePlayer }\r\n                >\r\n                    Удалить\r\n                </Button>\r\n\r\n                <IconButton\r\n                    className={ clsx(classes.expand, {\r\n                        [classes.expandOpen]: expanded,\r\n                    }) }\r\n                    onClick={ handleExpandClick }\r\n                    aria-expanded={ expanded }\r\n                    aria-label=\"show mat\"\r\n                >\r\n                    <ExpandMoreIcon />\r\n                </IconButton>\r\n            </CardActions>\r\n\r\n            <Collapse in={ expanded } timeout=\"auto\" unmountOnExit>\r\n                <CardContent className={ classes.cardContent }>\r\n                    <div className={ classes.slider } style={ { width: windowWidth - 65 } }>\r\n                        <div className={ classes.sliderBody }>\r\n                            <img\r\n                                className={ classes.sliderImage }\r\n                                src={ `${ mats.find(mat => mat.name === player.mat)?.imgPath }` }\r\n                                alt={ player.mat }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    );\r\n};\r\n\r\n\r\nexport default PlayerCard;\r\n","import Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { RootState } from '../app/rootReducer';\r\nimport { findPlayerByFaction, getRouteLastAddedPlayer, TOTAL_PLAYERS } from '../common/scytheLogic';\r\nimport { AppMenuFactions } from '../components/AppMenuFactions';\r\nimport PlayerCard from '../features/players/PlayerCard';\r\nimport { addPlayer, deleteAllPlayers, editPlayer } from '../features/players/playersSlice';\r\nimport { IPlayer } from '../features/players/types';\r\nimport Main from '../layouts/Main';\r\n\r\ntype Props = {\r\n    players: IPlayer[];\r\n    addPlayer: any;\r\n    deleteAllPlayers: any;\r\n}\r\n\r\nconst Home: FunctionComponent<Props> = (props) => {\r\n    const { players, deleteAllPlayers, addPlayer } = props;\r\n\r\n    // Проверка есть ли игроки или нужно показать начальную страницу\r\n    const { id = '' } = useParams<any>();\r\n    const player = findPlayerByFaction(players, id);\r\n\r\n    if (!id && players.length) {\r\n        return <Redirect to={ getRouteLastAddedPlayer(players) } />;\r\n    }\r\n\r\n    if (!players.length) {\r\n        return <Redirect to={ '/' } />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppMenuFactions players={ players } />\r\n\r\n            <Main>\r\n                <Grid container direction=\"column\" spacing={ 2 } justify={ 'center' }>\r\n                    {\r\n                        player &&\r\n                        <Grid item>\r\n                            <PlayerCard />\r\n                        </Grid>\r\n                    }\r\n\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"contained\" disabled={ players.length >= TOTAL_PLAYERS } color=\"secondary\" fullWidth\r\n                            onClick={ addPlayer }\r\n                        >\r\n                            Добавить игрока\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"contained\" disabled={ !player } color=\"primary\" fullWidth\r\n                            onClick={ handleNewGame }\r\n                        >\r\n                            Новая игра\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                    <Grid item> <br /> </Grid>\r\n                </Grid>\r\n            </Main>\r\n        </>\r\n    );\r\n\r\n    function handleNewGame() {\r\n        deleteAllPlayers();\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state: RootState) => ({\r\n        players: Object.values(state.players),\r\n    }),\r\n    { addPlayer, editPlayer, deleteAllPlayers },\r\n)(Home);\r\n","import { Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport mapKeys from 'lodash-es/mapKeys';\nimport React, { FunctionComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { RootState } from '../app/rootReducer';\nimport { getShortNameFaction, resources } from '../common/scytheLogic';\nimport { deletePlayers, editPlayer } from '../features/players/playersSlice';\nimport { PlayersType } from '../features/players/types';\nimport Main from '../layouts/Main';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 320,\n    },\n    sticky: {\n        position: 'sticky',\n        background: '#fff',\n        left: 0,\n        zIndex: 1,\n    },\n});\n\ntype Props = {\n    players: PlayersType;\n    editPlayer: typeof editPlayer;\n    deletePlayers: typeof deletePlayers;\n}\n\nconst Result: FunctionComponent<Props> = (props) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    const {\n        players,\n        deletePlayers,\n        editPlayer,\n    } = props;\n\n    const sortedPlayers = [...Object.values(players)].sort((a, b) => b.points - a.points);\n    const playersByWinningPosition = sortedPlayers.map((player, index) => ({ ...player, gameEndPosition: index + 1 }));\n    const converted = { ...mapKeys(playersByWinningPosition, 'id') };\n\n    const handleNewGame = () => {\n        // TODO добавить сохранение места\n        const sortedPlayers = [...Object.values(players)].sort((a, b) => b.points - a.points);\n        sortedPlayers.forEach((player, index) => editPlayer({ ...player, gameEndPosition: index + 1 }));\n\n        deletePlayers();\n        setTimeout(() => {history.push('/');}, 100);\n    };\n\n    return (\n        <Main className={ 'result-page' }>\n            <TableContainer component={ Paper }>\n                <Table className={ classes.table } size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"center\" size={ 'small' }>№</TableCell>\n                            <TableCell className={ classes.sticky }>Игрок</TableCell>\n                            {\n                                resources.map(resource => (\n                                    <TableCell align=\"center\">\n                                        <img width={ 30 } height={ 30 } src={ resource.imgPath } alt={ resource.name } />\n                                    </TableCell>\n                                ))\n                            }\n                            <TableCell align=\"center\">Всего</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        { Object.values(converted).map((player) => (\n                            <TableRow key={ player.name }>\n                                <TableCell align=\"center\">{ player.gameEndPosition }</TableCell>\n                                <TableCell className={ classes.sticky } component=\"th\" scope=\"player\" size={ 'small' }>\n                                    { player.name }\n                                    <br />\n                                    { getShortNameFaction(player.faction) }\n                                    <br />\n                                    { player.mat }\n                                </TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.popularity }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.stars }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.territories }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.resources }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.buildingBonuses }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.gold }</TableCell>\n                                <TableCell size={ 'small' } align=\"center\">{ player.points }</TableCell>\n                            </TableRow>\n                        )) }\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <br />\n            <Button\n                variant=\"contained\" color=\"secondary\"\n                onClick={ handleNewGame }\n            >\n                Новая игра\n            </Button>\n        </Main>\n    );\n};\n\nexport default connect(\n    (state: RootState) => ({\n        players: state.players,\n    }),\n    { deletePlayers, editPlayer },\n)(Result);\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport { Button, Grid, InputAdornment, TextField, Typography } from '@material-ui/core';\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HomeIcon from '@material-ui/icons/Home';\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\nimport StarIcon from '@material-ui/icons/Star';\nimport TerrainIcon from '@material-ui/icons/Terrain';\nimport React, { FC, useEffect, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { foundPrevNextPlayers } from '../../common/scytheLogic';\nimport { scoreFormSubmit } from './playersSlice';\nimport { getPlayerByFaction, getPlayersSortByFirstTurn } from './selectors';\nimport { IPlayer, IPoints } from './types';\n\nconst text = {\n    min: `Значение не может быть отрицательным`,\n    max: (max: number) => `Значение не может быть больше ${ max }`,\n};\n\nconst schema = yup.object().shape({\n    gold: yup.number().required().min(0, text.min).integer().typeError('Введите накопленные монеты'),\n    popularity: yup.number().required().min(0, text.min).max(18, text.max(18)).integer().typeError('Введите накопленную популярность'),\n    stars: yup.number().required().min(0, text.min).max(6, text.max(6)).integer().typeError('Введите накопленные звезды'),\n    territories: yup.number().required().min(0, text.min).integer().typeError('Введите кол-во контролируемых территорий'),\n    resources: yup.number().required().min(0, text.min).integer().typeError('Введите кол-во контролируемых ресурсов'),\n    buildingBonuses: yup.number().required().min(0, text.min).max(9, text.max(9)).integer().typeError('Введите кол-во монет за бонус зданий'),\n});\n\nexport const ScoreForm: FC = () => {\n    const { id } = useParams<{ id: string }>();\n    const players = useSelector(getPlayersSortByFirstTurn);\n    const player = useSelector(getPlayerByFaction(id));\n    const dispatch = useDispatch();\n\n    const { nextPlayer } = foundPrevNextPlayers(players, player as IPlayer);\n\n    const { register, handleSubmit, errors, reset } = useForm<IPoints>({\n        defaultValues: {\n            gold: player?.gold,\n            popularity: player?.popularity,\n            stars: player?.stars,\n            territories: player?.territories,\n            resources: player?.resources,\n            buildingBonuses: player?.buildingBonuses,\n        },\n        mode: 'onSubmit',\n        resolver: yupResolver(schema),\n    });\n\n    useEffect(() => {\n        if (!player?.gold &&\n            !player?.popularity &&\n            !player?.stars &&\n            !player?.territories &&\n            !player?.resources &&\n            !player?.buildingBonuses) {\n            reset({\n                gold: undefined,\n                popularity: undefined,\n                stars: undefined,\n                territories: undefined,\n                resources: undefined,\n                buildingBonuses: undefined,\n            });\n        } else {\n            reset(player);\n        }\n    }, [reset, player]);\n\n    const onSubmit = (formData: IPoints) => {\n        if (player) {\n            dispatch(scoreFormSubmit(player, formData, nextPlayer));\n        }\n    };\n\n    const firstInput = useRef<HTMLInputElement>();\n\n    useEffect(() => {\n        if (firstInput.current) {\n            register(firstInput.current);\n            firstInput.current.focus();\n        }\n    }, [nextPlayer.id]);\n\n    const handleOnFocus = (event: React.FocusEvent<any>): void => {\n        event.target.select();\n    };\n\n    return (\n        <form onSubmit={ handleSubmit(onSubmit) } autoComplete=\"off\">\n            <Grid container direction={ 'column' } spacing={ 2 }>\n                <Grid item>\n                    <TextField\n                        error={ !!errors.gold }\n                        helperText={ (errors?.gold as any)?.message }\n                        inputRef={ (e: HTMLInputElement) => {\n                            register(e);\n                            firstInput.current = e;\n                        } }\n                        id=\"gold\"\n                        name=\"gold\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Монеты на руках\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <MonetizationOnIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.popularity }\n                        helperText={ (errors?.popularity as any)?.message }\n                        inputRef={ register }\n                        id=\"popularity\"\n                        name=\"popularity\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Популярность\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <FavoriteIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.stars }\n                        helperText={ (errors?.stars as any)?.message }\n                        inputRef={ register }\n                        id=\"stars\"\n                        name=\"stars\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Кол-во звезд\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <StarIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.territories }\n                        helperText={ (errors?.territories as any)?.message }\n                        inputRef={ register }\n                        id=\"territories\"\n                        name=\"territories\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Территорий (фабрика дает +3)\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <TerrainIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.resources }\n                        helperText={ (errors?.resources as any)?.message }\n                        inputRef={ register }\n                        id=\"resources\"\n                        name=\"resources\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Всего ресурсов (каждый ресурс)\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <DonutLargeIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.buildingBonuses }\n                        helperText={ (errors?.buildingBonuses as any)?.message }\n                        inputRef={ register }\n                        id=\"buildingBonuses\"\n                        name=\"buildingBonuses\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Бонусы зданий\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <HomeIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <Grid container alignItems={ 'center' } justify={ 'space-between' } spacing={ 2 }>\n                        <Grid item>\n                            <Button type=\"submit\" color=\"primary\" variant=\"contained\">Подсчитать</Button>\n                        </Grid>\n\n                        <Grid item>\n                            { player?.points\n                                ? <Typography variant={ 'h6' }>Очков: { player?.points }</Typography>\n                                : null\n                            }\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </form>\n    );\n};\n","import { Grid, IconButton, Typography } from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { findEngNameFactionToUrl, foundPrevNextPlayers } from '../common/scytheLogic';\r\nimport { AppMenuFactions } from '../components/AppMenuFactions';\r\nimport { ScoreForm } from '../features/players/ScoreForm';\r\nimport { getPlayerByFaction, getPlayersSortByFirstTurn } from '../features/players/selectors';\r\nimport { IPlayer } from '../features/players/types';\r\nimport Main from '../layouts/Main';\r\nimport NotFound from './NotFound';\r\n\r\nconst Score: FC = () => {\r\n    const { id } = useParams<{ id: string }>();\r\n    const players = useSelector(getPlayersSortByFirstTurn);\r\n    const player = useSelector(getPlayerByFaction(id));\r\n\r\n    let { prevPlayer, nextPlayer } = foundPrevNextPlayers(players, player as IPlayer);\r\n    const prevPlayerPath = findEngNameFactionToUrl(prevPlayer.faction);\r\n    const nextPlayerPath = findEngNameFactionToUrl(nextPlayer.faction);\r\n\r\n    if (!player || !players) return <NotFound />;\r\n\r\n    return (\r\n        <>\r\n            <AppMenuFactions players={ players } />\r\n\r\n            <Main>\r\n                <Grid container direction={ 'column' } spacing={ 2 }>\r\n                    <Grid item>\r\n                        <Grid container alignItems={ 'center' }>\r\n                            <Grid item xs={ 8 } sm={ 10 }>\r\n                                <Typography variant={ 'h5' }>Игрок: { player.name }</Typography>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={ 2 } sm={ 1 } style={ { textAlign: 'end' } }>\r\n                                <IconButton\r\n                                    disabled={ !Boolean(prevPlayerPath) }\r\n                                    component={ Link }\r\n                                    to={ `/score/${ prevPlayerPath }` }\r\n                                    color=\"inherit\"\r\n                                >\r\n                                    <ChevronLeftIcon />\r\n                                </IconButton>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={ 2 } sm={ 1 } style={ { textAlign: 'end' } }>\r\n                                <IconButton\r\n                                    edge=\"end\"\r\n                                    disabled={ !Boolean(nextPlayerPath) }\r\n                                    component={ Link }\r\n                                    to={ `/score/${ nextPlayerPath }` }\r\n                                    color=\"inherit\"\r\n                                >\r\n                                    <ChevronRightIcon />\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <ScoreForm />\r\n                    </Grid>\r\n                </Grid>\r\n            </Main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Score;\r\n","import First from './pages/First';\r\nimport Home from './pages/Home';\r\nimport NotFound from './pages/NotFound';\r\nimport Result from './pages/Result';\r\nimport Score from './pages/Score';\r\nimport Settings from './pages/Settings';\r\n\r\nexport const routes = {\r\n    'first': {\r\n        path: '/',\r\n        title: '',\r\n        exact: true,\r\n        component: First,\r\n    },\r\n    'index': {\r\n        path: '/faction/:id?/',\r\n        title: 'Фракции',\r\n        exact: false,\r\n        component: Home,\r\n    },\r\n    'score': {\r\n        path: '/score/:id?/',\r\n        title: 'Подсчет очков',\r\n        exact: true,\r\n        component: Score,\r\n    },\r\n    'result': {\r\n        path: '/result',\r\n        title: 'Итоги по окончанию игры',\r\n        exact: true,\r\n        component: Result,\r\n    },\r\n    'map': {\r\n        path: '/map',\r\n        title: 'Карта',\r\n        exact: true,\r\n        component: NotFound,\r\n    },\r\n    'settings': {\r\n        path: '/settings',\r\n        title: 'Настройки',\r\n        exact: true,\r\n        component: Settings,\r\n    },\r\n};\r\n","import { Grid, Link } from '@material-ui/core';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport React, { FunctionComponent } from 'react';\nimport Main from '../layouts/Main';\n\ninterface OwnProps {}\n\ntype Props = OwnProps;\n\nconst Settings: FunctionComponent<Props> = (props) => {\n    return (\n        <Main>\n            <Grid container>\n                <Grid item>\n                    <Link rel=\"noopener\" href=\"https://github.com/justbenya/scythe-app\">\n                        <GitHubIcon fontSize={ 'large' } style={ { color: '#fff' } } />\n                    </Link>\n                </Grid>\n\n            </Grid>\n\n        </Main>\n    );\n};\n\nexport default Settings;\n","import { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { RootState } from '../app/rootReducer';\r\nimport { findEngNameFactionToUrl, getLastAddedFaction } from '../common/scytheLogic';\r\nimport { clearPath } from '../common/utils';\r\nimport { getPlayerWhoHasFirstTurn } from '../features/players/selectors';\r\nimport { IPlayer } from '../features/players/types';\r\nimport { routes } from '../routes';\r\n\r\nexport const AppMenuNavigation: FC = () => {\r\n    const history = useHistory();\r\n    const players = useSelector<RootState, IPlayer[]>(state => Object.values(state.players));\r\n    const player = useSelector(getPlayerWhoHasFirstTurn);\r\n\r\n    return (\r\n        <BottomNavigation className=\"menu-footer\" value={ history.location.pathname } showLabels>\r\n            <BottomNavigationAction\r\n                icon={ <PeopleIcon /> }\r\n                component={ Link }\r\n                label=\"Игроки\"\r\n                value={ history.location.pathname.includes(clearPath(routes.index.path)) ? history.location.pathname : null }\r\n                to={ `${ clearPath(routes.index.path) }${ getLastAddedFaction(players) }` }\r\n            />\r\n\r\n            <BottomNavigationAction\r\n                disabled={ !players.length }\r\n                icon={ <DonutLargeIcon /> }\r\n                component={ Link }\r\n                label=\"Очки\"\r\n                value={ history.location.pathname.includes(clearPath(routes.score.path)) ? history.location.pathname : null }\r\n                to={ `${ clearPath(routes.score.path) }${ findEngNameFactionToUrl(player?.faction) }` }\r\n            />\r\n\r\n            <BottomNavigationAction\r\n                disabled={ !players.length }\r\n                icon={ <ListAltIcon /> }\r\n                component={ Link }\r\n                label=\"Результаты\"\r\n                value={ routes.result.path }\r\n                to={ routes.result.path }\r\n            />\r\n\r\n            {/*<BottomNavigationAction*/}\r\n            {/*    icon={ <SettingsIcon /> }*/}\r\n            {/*    component={ Link }*/}\r\n            {/*    label=\"Настройки\"*/}\r\n            {/*    value=\"/settings\"*/}\r\n            {/*    to=\"/settings\"*/}\r\n            {/*/>*/}\r\n        </BottomNavigation>\r\n    );\r\n};\r\n","import Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport React, { FC } from 'react';\r\nimport { AppMenuNavigation } from '../components/AppMenuNavigation';\r\n\r\nconst useStyles = makeStyles({\r\n    fixed: {\r\n        '@media (min-width: 600px)': {\r\n            maxWidth: 768,\r\n        },\r\n        '@media (min-width: 960px)': {\r\n            maxWidth: 960,\r\n        },\r\n        '@media (min-width: 1280px)': {\r\n            maxWidth: 1280,\r\n        },\r\n    },\r\n    main: {\r\n        height: '100%',\r\n        paddingTop: 80,\r\n        paddingBottom: 80,\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    [name: string]: any;\r\n}\r\n\r\nconst Main: FC<Props> = (props) => {\r\n    const { className } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n\r\n            <Container fixed className={ classes.fixed }>\r\n                <main className={ clsx(classes.main, className) }>{ props.children }</main>\r\n            </Container>\r\n\r\n            <AppMenuNavigation />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport Main from '../layouts/Main';\n\nconst NotFound: FunctionComponent = () => {\n    return (\n        <Main>\n            <Typography variant={ 'h1' } align={ 'center' }>404?!</Typography>\n            <Button component={ Link } to={ '/' } variant=\"outlined\" color=\"primary\" fullWidth>\n                Вернуться на главную\n            </Button>\n        </Main>\n    );\n};\n\nexport default NotFound;\n","import React, { FunctionComponent } from 'react';\r\nimport { Route, Router, Switch } from 'react-router-dom';\r\nimport history from '../history';\r\nimport NotFound from '../pages/NotFound';\r\nimport { routes } from '../routes';\r\n\r\nconst App: FunctionComponent = () => (\r\n    <Router history={ history }>\r\n        <Switch>\r\n            { Object.values(routes).map((route: any) => <Route key={ route.path } { ...route } />) }\r\n            <Route component={ NotFound } />\r\n        </Switch>\r\n    </Router>\r\n);\r\n\r\nexport default App;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport names from '../features/names/namesSlice';\r\nimport players from '../features/players/playersSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n    players,\r\n    names\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default rootReducer;\r\n","import { Action, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport rootReducer, { RootState } from './rootReducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    version: 2,\r\n    storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware: getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","import { StylesProvider } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport App from './app/App';\r\nimport store, { persistor } from './app/store';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <Provider store={ store }>\r\n        <PersistGate loading={ null } persistor={ persistor }>\r\n            <StylesProvider injectFirst>\r\n                <App />\r\n            </StylesProvider>\r\n        </PersistGate>\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}