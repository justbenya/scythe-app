{"version":3,"sources":["components/ButtonInstallPWA.tsx","history.ts","common/utils.ts","features/players/playersSlice.ts","common/scytheLogic.ts","img/bg.jpg","pages/First.tsx","components/ButtonNewGame.tsx","components/FactionIcon.tsx","components/FactionIconWithBadge.tsx","components/TabPanel.tsx","components/FullWidthTabs.tsx","components/FactionCharacterImage.tsx","features/players/selectors.ts","features/names/namesSlice.ts","features/names/selectors.ts","features/names/AutocompletePlayerName.tsx","features/players/PlayerCard.tsx","pages/Home.tsx","pages/Result.tsx","features/players/ScoreForm.tsx","pages/Score.tsx","routes.ts","pages/Settings.tsx","components/AppMenuNavigation.tsx","components/MainLayout.tsx","pages/NotFound.tsx","app/App.tsx","app/rootReducer.ts","app/store.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["deferredPrompt","createHistory","basename","ButtonInstallPWA","useState","installable","setInstallable","useEffect","window","addEventListener","e","preventDefault","Button","onClick","prompt","userChoice","then","choiceResult","outcome","console","log","shuffle","array","result","i","length","randIndex","Math","floor","random","temp","clearPath","path","replace","playersSlice","createSlice","name","initialState","reducers","createPlayer","reducer","state","action","Object","values","TOTAL_PLAYERS","usedFaction","map","faction","usedMats","mat","randomFactions","factions","filter","includes","randomMats","mats","player","id","payload","gold","popularity","stars","territories","resources","buildingBonuses","points","prepare","nanoid","editPlayer","removePlayer","omit","deletePlayers","actions","changeFieldInPlayer","field","newValue","playerId","dispatch","getState","players","prevValue","isValueAlreadySelected","find","changePlayer","history","push","routes","index","findEngNameFactionToUrl","scoreFormSubmit","formData","nextPlayer","calculatePoints","every","score","addPlayer","a","getRouteLastAddedPlayer","useStyles","makeStyles","container","height","paddingBottom","paperContainer","backgroundColor","backgroundImage","Image","backgroundPosition","backgroundSize","logo","marginTop","width","title","paddingTop","fontWeight","color","fontSize","textShadow","btnAddPlayer","First","useDispatch","classes","Paper","className","elevation","square","variant","Container","fixed","Grid","direction","justify","alignItems","spacing","item","Typography","align","fullWidth","Transition","React","forwardRef","props","ref","Slide","ButtonNewGame","open","setOpen","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","FactionIcon","iconPath","src","alt","FactionIconWithBadge","Badge","invisible","overlap","badgeContent","style","green","getIconPath","root","margin","maxWidth","TabPanel","children","value","other","role","hidden","Box","p","theme","palette","background","paper","default","tab","padding","textTransform","opacity","minHeight","text","primary","swipeableViews","FullWidthTabs","useTheme","useParams","foundPlayerIndexByFaction","setValue","useHistory","factionUrl","useRouteMatch","scoreUrl","url","getLabel","shortName","AppBar","position","Toolbar","Tabs","onChange","event","scrollButtons","indicatorColor","Tab","component","Link","clsx","label","icon","to","threshold","hysteresis","resistance","axis","onChangeIndex","dir","media","objectPosition","FactionCharacterImage","characterPath","CardMedia","image","getPlayers","getPlayerWhoHasFirstTurn","createSelector","playerFirstTurn","getPlayersSortByFirstTurn","playerFirstTurnIndex","factionsMoveOrder","indexOf","turnOrder","reversedMoveOrder","_","nth","it","fistElement","slice","reverse","getPlayerByFaction","namesSlice","addName","deleteName","changeName","obj","getNames","names","createFilterOptions","AutocompletePlayerName","useSelector","createName","Autocomplete","inputValue","filterOptions","options","params","filtered","isNameNotEmpty","isNameUnique","isNameExist","findIndex","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","option","renderOption","display","justifyContent","IconButton","aria-label","stopPropagation","handleDeleteName","freeSolo","renderInput","TextField","size","createStyles","expand","transform","marginLeft","transition","transitions","create","duration","shortest","cardActions","cardContent","expandOpen","matImage","PlayerCard","expanded","setExpanded","Card","CardContent","xs","sm","select","SelectProps","renderValue","target","MenuItem","CardActions","disableSpacing","aria-expanded","Collapse","in","timeout","unmountOnExit","imgPath","Home","disabled","borderCollapse","minWidth","sticky","left","zIndex","resourceIcon","verticalAlign","Result","playersByWinningPosition","sort","b","gameEndPosition","TableContainer","Table","TableHead","TableRow","TableCell","resource","TableBody","scope","getShortNameFaction","max","schema","yup","shape","required","min","integer","typeError","ScoreForm","currentIndex","last","first","prevPlayer","foundPrevNextPlayers","useForm","defaultValues","mode","resolver","yupResolver","register","handleSubmit","errors","reset","undefined","handleOnFocus","onSubmit","autoComplete","error","helperText","message","inputRef","type","onFocus","InputProps","startAdornment","InputAdornment","Score","exact","NotFound","rel","href","slug","process","dictionaryByFactionNames","keyBy","getLastAddedFaction","lastAddedPlayer","homePage","searchFaction","AppMenuNavigation","BottomNavigation","location","pathname","showLabels","BottomNavigationAction","main","MainLayout","orientation","useOrientationChange","createMuiTheme","secondary","red","light","dark","contrastText","A400","App","ThemeProvider","CssBaseline","route","rootReducer","combineReducers","persistConfig","key","version","storage","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","loading","StylesProvider","injectFirst","document","getElementById","URL","origin","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c64bb30c.chunk.js","sourcesContent":["import Button from '@material-ui/core/Button';\nimport React, { useEffect, useState } from 'react';\n\nlet deferredPrompt: any;\n\nexport const ButtonInstallPWA = () => {\n    const [installable, setInstallable] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener('beforeinstallprompt', (e: Event) => {\n            // Prevent the mini-infobar from appearing on mobile\n            e.preventDefault();\n            // Stash the event so it can be triggered later.\n            deferredPrompt = e;\n            // Update UI notify the user they can install the PWA\n            setInstallable(true);\n        });\n    }, []);\n\n\n    const handleInstallClick = () => {\n        // Hide the app provided install promotion\n        setInstallable(false);\n        // Show the install prompt\n        deferredPrompt.prompt();\n        // Wait for the user to respond to the prompt\n        deferredPrompt.userChoice.then((choiceResult: any) => {\n            if (choiceResult.outcome === 'accepted') {\n                console.log('User accepted the install prompt');\n            } else {\n                console.log('User dismissed the install prompt');\n            }\n        });\n    };\n\n\n    return (\n        <div>\n            { installable && <Button onClick={ handleInstallClick }>Установить</Button> }\n        </div>\n    );\n};\n\n","import { createHashHistory as createHistory } from 'history'\r\n\r\nexport default createHistory({\r\n    basename: '/'\r\n});\r\n","export function shuffle(array: any): Array<any> {\r\n    const result = [...array];\r\n    for (let i = result.length - 1; i > 0; i--) {\r\n        let randIndex = Math.floor(Math.random() * (i + 1));\r\n        let temp = result[i];\r\n        result[i] = result[randIndex];\r\n        result[randIndex] = temp;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function isEmpty(obj: object | null) {\r\n    return obj === null ? true : Object.keys(obj).length === 0;\r\n}\r\n\r\nexport function clearPath(path: string): string {\r\n    const firstVariant = path.replace(':id?/', '');\r\n    return firstVariant.replace(':id', '');\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport omit from 'lodash-es/omit';\r\nimport { nanoid } from 'nanoid';\r\nimport { AppThunk } from '../../app/store';\r\nimport {\r\n    calculatePoints,\r\n    factions,\r\n    findEngNameFactionToUrl,\r\n    getRouteLastAddedPlayer,\r\n    mats,\r\n    TOTAL_PLAYERS,\r\n} from '../../common/scytheLogic';\r\nimport { clearPath, shuffle } from '../../common/utils';\r\nimport history from '../../history';\r\nimport { routes } from '../../routes';\r\nimport { IPlayer, IPoints, PlayersType } from './types';\r\n\r\nconst initialState: PlayersType = {};\r\n\r\nconst playersSlice = createSlice({\r\n    name: 'players',\r\n    initialState,\r\n    reducers: {\r\n        createPlayer: {\r\n            reducer: (state, action: PayloadAction<{ id: string }>) => {\r\n                if (Object.values(state).length >= TOTAL_PLAYERS) {\r\n                    return;\r\n                }\r\n\r\n                // 1. Получить уже используемые фракции и планшеты\r\n                const usedFaction = Object.values(state).map(i => i.faction);\r\n                const usedMats = Object.values(state).map(i => i.mat);\r\n\r\n                // 2. Рандомно выберем фракции и планшеты, уберем уже используемые\r\n                const randomFactions = shuffle(factions).filter(faction => !usedFaction.includes(faction.name));\r\n                const randomMats = shuffle(mats).filter(mat => !usedMats.includes(mat.name));\r\n\r\n                // 3. Готово!\r\n                const faction = randomFactions[0].name;\r\n                const mat = randomMats[0].name;\r\n\r\n                const player = {\r\n                    id: action.payload.id,\r\n                    name: 'Player ' + (Object.values(state).length + 1),\r\n                    faction,\r\n                    mat,\r\n                    gold: 0,\r\n                    popularity: 0,\r\n                    stars: 0,\r\n                    territories: 0,\r\n                    resources: 0,\r\n                    buildingBonuses: 0,\r\n                    points: 0,\r\n                };\r\n\r\n                state[player.id] = player;\r\n            },\r\n            prepare: () => {\r\n                const id = nanoid();\r\n                return { payload: { id } };\r\n            },\r\n        },\r\n\r\n        editPlayer(state, action: PayloadAction<IPlayer>) {\r\n            return { ...state, [action.payload.id]: action.payload };\r\n        },\r\n\r\n        removePlayer(state, action: PayloadAction<string>) {\r\n            return omit(state, action.payload);\r\n        },\r\n\r\n        deletePlayers() {\r\n            return {};\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    createPlayer,\r\n    editPlayer,\r\n    removePlayer,\r\n    deletePlayers,\r\n} = playersSlice.actions;\r\n\r\nexport const changeFieldInPlayer = (\r\n    field: 'faction' | 'mat',\r\n    newValue: string,\r\n    playerId: string,\r\n): AppThunk => {\r\n    return (dispatch, getState) => {\r\n        const players = getState().players;\r\n        const prevValue = players[playerId][field];\r\n\r\n        const isValueAlreadySelected = Object.values(players).find(player => player[field] === newValue);\r\n\r\n        if (isValueAlreadySelected) {\r\n            const changePlayer = { ...players[isValueAlreadySelected.id], [field]: prevValue };\r\n            dispatch(editPlayer(changePlayer));\r\n        }\r\n\r\n        const changePlayer = { ...players[playerId], [field]: newValue };\r\n        dispatch(editPlayer(changePlayer));\r\n\r\n        if (field === 'faction') {\r\n            history.push(`${ clearPath(routes.index.path) }${ findEngNameFactionToUrl(changePlayer.faction) }`);\r\n        }\r\n    }\r\n}\r\n\r\nexport const scoreFormSubmit = (player: IPlayer, formData: IPoints, nextPlayer: IPlayer): AppThunk => {\r\n    return (dispatch, getState) => {\r\n        const points = calculatePoints(formData);\r\n\r\n        dispatch(editPlayer({\r\n            ...player,\r\n            ...formData,\r\n            points,\r\n        }));\r\n\r\n        const players = Object.values(getState().players);\r\n        if (players.every(player => player.points > 0)) {\r\n            history.push(routes.result.path);\r\n        } else {\r\n            history.push(`${ clearPath(routes.score.path) }${ findEngNameFactionToUrl(nextPlayer.faction) }`);\r\n        }\r\n    }\r\n}\r\n\r\nexport const addPlayer = (): AppThunk => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(createPlayer());\r\n        const players = Object.values(getState().players);\r\n        const path = getRouteLastAddedPlayer(players);\r\n        history.push(path);\r\n    };\r\n};\r\n\r\nexport const deletePlayer = (id: string): AppThunk => {\r\n    return (dispatch => {\r\n        dispatch(removePlayer(id));\r\n        history.push(clearPath(routes['index'].path));\r\n    });\r\n};\r\n\r\nexport const deleteAllPlayers = (): AppThunk => {\r\n    return (dispatch => {\r\n        dispatch(deletePlayers());\r\n        history.push('/');\r\n    });\r\n};\r\n\r\nexport default playersSlice.reducer;\r\n","import keyBy from 'lodash-es/keyBy';\r\nimport { IPlayer, IPoints } from '../features/players/types';\r\nimport { routes } from '../routes';\r\nimport { clearPath } from './utils';\r\n\r\nexport const TOTAL_PLAYERS = 5;\r\n\r\nexport const factionsMoveOrder = [\r\n    'Республика Поляния',\r\n    'Северное королевство',\r\n    'Руссветский союз',\r\n    'Крымское ханство',\r\n    'Саксонская империя',\r\n];\r\n\r\nexport type FactionType = 'polania' | 'saxony' | 'crimean' | 'nordic' | 'rusviet';\r\n\r\nexport const factions = [\r\n    {\r\n        name: 'Республика Поляния',\r\n        shortName: 'Поляния',\r\n        slug: 'polania',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/polania.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/polania.png`,\r\n    },\r\n    {\r\n        name: 'Саксонская империя',\r\n        shortName: 'Саксония',\r\n        slug: 'saxony',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/saxony.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/saxony.png`,\r\n    },\r\n    {\r\n        name: 'Крымское ханство',\r\n        shortName: 'Крым',\r\n        slug: 'crimean',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/crimean.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/crimean.png`,\r\n    },\r\n    {\r\n        name: 'Северное королевство',\r\n        shortName: 'Север',\r\n        slug: 'nordic',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/nordic.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/nordic.png`,\r\n    },\r\n    {\r\n        name: 'Руссветский союз',\r\n        shortName: 'Руссвет',\r\n        slug: 'rusviet',\r\n        characterPath: `${ process.env.PUBLIC_URL }/assets/factions/rusviet.jpg`,\r\n        iconPath: `${ process.env.PUBLIC_URL }/assets/icons/factions/rusviet.png`,\r\n    },\r\n];\r\n\r\nexport const mats = [\r\n    {\r\n        name: 'Промышленный (1)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/industrial1.jpg`,\r\n    },\r\n    {\r\n        name: 'Строительный (2)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/engineering2.jpg`,\r\n    },\r\n    {\r\n        name: 'Патриотический (3)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/patriotic3.jpg`,\r\n    },\r\n    {\r\n        name: 'Технический (4)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/mechanical4.jpg`,\r\n    },\r\n    {\r\n        name: 'Фермерский (5)',\r\n        imgPath: `${ process.env.PUBLIC_URL }/assets/mats/argicultural5.jpg`,\r\n    },\r\n];\r\n\r\nexport const resources = [\r\n    { name: 'Популярность', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/popularity.png` },\r\n    { name: 'Звезд', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/stars.png` },\r\n    { name: 'Территорий', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/territories.png` },\r\n    { name: 'Ресурсов', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/resources.png` },\r\n    { name: 'Бонусов зданий', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/structureBonus.png` },\r\n    { name: 'Монет', imgPath: `${ process.env.PUBLIC_URL }/assets/icons/resources/gold.png` },\r\n];\r\n\r\nexport const structureBonus = [\r\n    'Количество территорий с туннелями',\r\n    'Количество озёр',\r\n    'Количество территорий с символами приключений',\r\n    'Количество территорий с туннелями и вашими зданиями',\r\n    'Количество ваших зданий построенных в один ряд',\r\n    'Количество тундр и ферм с вашими зданиями',\r\n];\r\n\r\nexport function calculatePoints(points: IPoints): number {\r\n    let result = 0;\r\n\r\n    if (points.popularity >= 0 && points.popularity <= 6) {\r\n        result = (points.stars * 3) + (points.territories * 2) + Math.floor(points.resources / 2) + points.buildingBonuses + points.gold;\r\n    } else if (points.popularity >= 7 && points.popularity <= 12) {\r\n        result = (points.stars * 4) + (points.territories * 3) + Math.floor(points.resources / 2) * 2 + points.buildingBonuses + points.gold;\r\n    } else if (points.popularity >= 13 && points.popularity <= 18) {\r\n        result = (points.stars * 5) + (points.territories * 4) + Math.floor(points.resources / 2) * 3 + points.buildingBonuses + points.gold;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function findPlayerByFaction(players: IPlayer[], searchWord: string): IPlayer {\r\n    return players.find(item => findEngNameFactionToUrl(item.faction) === searchWord) as IPlayer;\r\n}\r\n\r\nexport function findEngNameFactionToUrl(faction: string = ''): string {\r\n    const dictionaryByFactionNames = keyBy(factions, 'name');\r\n    return dictionaryByFactionNames[faction].slug ? dictionaryByFactionNames[faction].slug : '';\r\n}\r\n\r\nexport function getShortNameFaction(faction: string = ''): string {\r\n    const dictionaryByFactionNames = keyBy(factions, 'name');\r\n    return dictionaryByFactionNames[faction].shortName ? dictionaryByFactionNames[faction].shortName : '';\r\n}\r\n\r\nexport function getLastAddedFaction(players: IPlayer[]): string {\r\n    if (players.length <= 0) return '';\r\n    const lastAddedPlayer = players[players.length - 1];\r\n    return findEngNameFactionToUrl(lastAddedPlayer.faction);\r\n}\r\n\r\nexport function getRouteLastAddedPlayer(players: IPlayer[]) {\r\n    const lastAddedPlayer = players[players.length - 1];\r\n    const homePage = clearPath(routes['index'].path);\r\n    return `${ homePage }${ findEngNameFactionToUrl(lastAddedPlayer.faction) }`;\r\n}\r\n\r\nexport function findFactionWhoHasFirstTurn(players: IPlayer[]): string {\r\n    for (const mat of mats) {\r\n        const playerFirstTurn = players.find(player => player.mat === mat.name);\r\n        if (playerFirstTurn) {\r\n            return findEngNameFactionToUrl(playerFirstTurn.faction);\r\n        }\r\n    }\r\n    return '';\r\n}\r\n\r\nexport function foundPrevNextPlayers(players: IPlayer[] = [], player: IPlayer) {\r\n    const currentIndex = players.findIndex(item => item.id === player.id);\r\n\r\n    const last = players[players.length - 1];\r\n    const first = players[0];\r\n\r\n    const prevPlayer = currentIndex >= 0 && players[currentIndex - 1] ? players[currentIndex - 1] : last;\r\n    const nextPlayer = currentIndex >= 0 && players[currentIndex + 1] ? players[currentIndex + 1] : first;\r\n\r\n    return {\r\n        prevPlayer,\r\n        nextPlayer,\r\n    };\r\n}\r\n\r\n\r\nexport function foundPlayerIndexByFaction(players: IPlayer[], searchFaction: FactionType) {\r\n    const factions = players.map(player => findEngNameFactionToUrl(player.faction));\r\n    const index = factions.findIndex(faction => faction === searchFaction);\r\n    return index <= 0 ? 0 : index;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/bg.2905f7ce.jpg\";","import { Button, Container, Grid, Paper, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ButtonInstallPWA } from '../components/ButtonInstallPWA';\nimport { addPlayer } from '../features/players/playersSlice';\nimport Image from '../img/bg.jpg';\n\nconst useStyles = makeStyles({\n    container: {\n        height: '100vh',\n        paddingBottom: '12vh',\n    },\n    paperContainer: {\n        backgroundColor: '#acacac',\n        backgroundImage: `url(${ Image })`,\n        height: '100%',\n        backgroundPosition: 'top center',\n        backgroundSize: 'cover',\n    },\n    logo: {\n        marginTop: 20,\n        width: 120,\n        height: 120,\n    },\n    title: {\n        paddingTop: 60,\n        fontWeight: 'bold',\n        color: '#fff',\n        fontSize: 46,\n        textShadow: '0 2px 3px rgba(0, 0, 0, 0.4), 0 8px 14px rgba(0, 0, 0, 0.1), 0 18px 30px rgba(0, 0, 0, 0.1)',\n    },\n    btnAddPlayer: {\n        marginTop: 'auto',\n    },\n});\n\nconst First: FC = () => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    return (\n        <>\n            <Paper className={ classes.paperContainer } elevation={ 0 } square={ true } variant={ 'outlined' }>\n                <Container fixed>\n                    <Grid\n                        className={ classes.container }\n                        container\n                        direction=\"column\"\n                        justify={ 'center' }\n                        alignItems={ 'center' }\n                        spacing={ 2 }\n                    >\n                        <Grid item>\n                            <Typography align={ 'center' } className={ classes.title }>\n                                Scythe Score Calculator\n                            </Typography>\n                        </Grid>\n\n                        <Grid className={ classes.btnAddPlayer } item>\n                            <Button\n                                variant=\"contained\" color=\"secondary\" fullWidth\n                                onClick={ () => dispatch(addPlayer()) }\n                            >\n                                Добавить игрока\n                            </Button>\n                        </Grid>\n\n                        <Grid item>\n                            <ButtonInstallPWA />\n                        </Grid>\n                    </Grid>\n                </Container>\n            </Paper>\n        </>\n    );\n};\n\nexport default First;\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteAllPlayers } from '../features/players/playersSlice';\n\nconst Transition = React.forwardRef(function Transition(\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\n    ref: React.Ref<unknown>,\n) {\n    return <Slide direction=\"up\" ref={ ref } { ...props } />;\n});\n\nexport const ButtonNewGame = () => {\n    const [open, setOpen] = React.useState(false);\n    const dispatch = useDispatch();\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleCreateNewGame = () => {\n        dispatch(deleteAllPlayers());\n    };\n\n    return (\n        <div>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                onClick={ handleClickOpen }\n            >\n                Новая игра\n            </Button>\n\n            <Dialog\n                open={ open }\n                TransitionComponent={ Transition }\n                keepMounted\n                onClose={ handleClose }\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">{ 'Создать новую игру?' }</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        Все данные в текущей игре будут удалены.\n                        <br />\n                        Отменить это действие будет невозможно.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={ handleClose } color=\"primary\">\n                        Отмена\n                    </Button>\n                    <Button onClick={ handleCreateNewGame } color=\"secondary\">\n                        Создать\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n","import React, { FC } from 'react';\r\n\r\ntype Props = {\r\n    name: string;\r\n    iconPath?: string;\r\n}\r\n\r\nconst FactionIcon: FC<Props> = (props) => {\r\n    const { name, iconPath } = props;\r\n\r\n    if (!iconPath) return null;\r\n\r\n    return (\r\n        <img height={ 35 } width={ 35 } src={ iconPath } alt={ name } />\r\n    );\r\n};\r\n\r\nexport default FactionIcon;\r\n","import { Badge } from '@material-ui/core';\nimport green from '@material-ui/core/colors/green';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport React, { FC } from 'react';\nimport { factions } from '../common/scytheLogic';\nimport { IPlayer } from '../features/players/types';\nimport FactionIcon from './FactionIcon';\n\ntype FactionIconType = {\n    player: IPlayer\n}\n\nexport const FactionIconWithBadge: FC<FactionIconType> = ({ player }) => {\n    const getIconPath = (player: IPlayer) => factions.find(i => i.name === player.faction)?.iconPath;\n\n    return (\n        <Badge\n            invisible={ player.points <= 0 }\n            overlap=\"circle\"\n            color=\"default\"\n            badgeContent={ <CheckCircleIcon style={ { fontSize: 16, color: green[400] } } /> }\n        >\n            <FactionIcon name={ player.faction } iconPath={ getIconPath(player) } />\n        </Badge>\n    );\n};\n","import Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { FC } from 'react';\n\nconst useStyles = makeStyles({\n    root: {\n        height: '100%',\n        width: '100%',\n        margin: '0 auto',\n        '@media (min-width: 600px)': {\n            maxWidth: \"100%\",\n        },\n        '@media (min-width: 960px)': {\n            maxWidth: 960,\n        },\n        '@media (min-width: 1280px)': {\n            maxWidth: 1280,\n        },\n    },\n});\n\ntype Props = {\n    index: any;\n    value: any;\n    children?: React.ReactNode;\n    dir?: string;\n}\n\nexport const TabPanel: FC<Props> = (props) => {\n    const { children, value, index, ...other } = props;\n    const classes = useStyles();\n\n    return (\n        <div\n            className={ classes.root }\n            role=\"tabpanel\"\n            hidden={ value !== index }\n            id={ `full-width-tabpanel-${ index }` }\n            aria-labelledby={ `full-width-tab-${ index }` }\n            { ...other }\n        >\n            { value === index && (\n                <Box p={ 2 }>\n                    { children }\n                </Box>\n            ) }\n        </div>\n    );\n};\n","import { AppBar, Paper, Tab, Tabs, Toolbar } from '@material-ui/core';\nimport { makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport React, { FC, ReactNode, useEffect } from 'react';\nimport { Link, useHistory, useParams, useRouteMatch } from 'react-router-dom';\nimport SwipeableViews from 'react-swipeable-views';\nimport { factions, FactionType, findEngNameFactionToUrl, foundPlayerIndexByFaction } from '../common/scytheLogic';\nimport { clearPath } from '../common/utils';\nimport { IPlayer } from '../features/players/types';\nimport { routes } from '../routes';\nimport { AppMenuNavigation } from './AppMenuNavigation';\nimport { FactionIconWithBadge } from './FactionIconWithBadge';\nimport { TabPanel } from './TabPanel';\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.default,\n        width: '100%',\n        height: '100%',\n        paddingTop: 65,\n        paddingBottom: 55,\n    },\n    tab: {\n        padding: '3px 6px',\n        fontSize: '12px',\n        fontWeight: 300,\n        textTransform: 'initial',\n        opacity: 0.4,\n        minHeight: 65,\n        color: theme.palette.text.primary,\n    },\n    swipeableViews: { height: '100%' },\n}));\n\n\ntype Props = {\n    players: IPlayer[];\n    children: ReactNode;\n    faction?: FactionType;\n}\n\nexport const FullWidthTabs: FC<Props> = ({ children, players }) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const { id: faction } = useParams<{ id: FactionType }>();\n\n    const [value, setValue] = React.useState(foundPlayerIndexByFaction(players, faction));\n\n    const history = useHistory();\n    let factionUrl = useRouteMatch(routes.index.path);\n    let scoreUrl = useRouteMatch(routes.score.path);\n    const url = factionUrl?.path || scoreUrl?.path || '';\n\n    const handleChange = (event: React.ChangeEvent<{}>, value: number) => {\n        setValue(value);\n    };\n\n    const handleChangeIndex = (index: number) => {\n        if (index < players.length) {\n            setValue(index);\n            history.push(`${ clearPath(url) }${ findEngNameFactionToUrl(players[index].faction) }`);\n        }\n    };\n\n    useEffect(() => {\n        setValue(foundPlayerIndexByFaction(players, faction));\n    }, [faction]);\n\n    const getLabel = (player: IPlayer) => factions.find(i => i.name === player.faction)?.shortName;\n\n    return (\n        <Paper className={ classes.paper }>\n            <AppBar className={ classes.root } position=\"fixed\">\n                <div className=\"container\">\n                    <Toolbar>\n                        <Tabs\n                            value={ value }\n                            onChange={ handleChange }\n                            scrollButtons=\"auto\"\n                            variant=\"scrollable\"\n                            indicatorColor=\"secondary\"\n                        >\n                            { players.map((player: IPlayer) => (\n                                <Tab\n                                    key={ player.faction }\n                                    component={ Link }\n                                    className={ clsx(classes.tab, 'faction-tab') }\n                                    label={ getLabel(player) }\n                                    icon={ <FactionIconWithBadge player={ player } /> }\n                                    to={ `${ clearPath(url) }${ findEngNameFactionToUrl(player.faction) }` }\n                                />\n                            )) }\n                        </Tabs>\n                    </Toolbar>\n                </div>\n            </AppBar>\n\n            <SwipeableViews\n                threshold={2}\n                hysteresis={0.1}\n                resistance\n                className={ classes.swipeableViews }\n                axis={ theme.direction === 'rtl' ? 'x-reverse' : 'x' }\n                index={ value }\n                onChangeIndex={ handleChangeIndex }\n            >\n                { players.map((player, index) => (\n                    <TabPanel key={ player.faction } value={ value } index={ index } dir={ theme.direction }>\n                        { children }\n                    </TabPanel>\n                )) }\n            </SwipeableViews>\n\n            <AppMenuNavigation />\n        </Paper>\n    );\n};\n","import { CardMedia } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles({\r\n    media: {\r\n        objectPosition: '50% 25%',\r\n        height: '25vh',\r\n        minHeight: 140\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    name?: string,\r\n    characterPath?: string\r\n};\r\n\r\nconst FactionCharacterImage: React.FC<Props> = (props) => {\r\n    const { name = '', characterPath = '' } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <CardMedia\r\n            component=\"img\"\r\n            className={ classes.media }\r\n            image={ characterPath }\r\n            alt={ name }\r\n            title={ name }\r\n        />\r\n    );\r\n};\r\n\r\nexport default FactionCharacterImage;\r\n","import { createSelector } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { RootState } from '../../app/rootReducer';\nimport { factionsMoveOrder, findEngNameFactionToUrl, mats } from '../../common/scytheLogic';\nimport { IPlayer } from './types';\n\nexport const getPlayers = (state: RootState) => Object.values(state.players);\n\nexport const getPlayerWhoHasFirstTurn = createSelector(\n    [getPlayers],\n    (players: IPlayer[]) => {\n        for (const mat of mats) {\n            const playerFirstTurn = players.find(player => player.mat === mat.name);\n            if (playerFirstTurn) {\n                return playerFirstTurn;\n            }\n        }\n        return null;\n    });\n\nexport const getPlayersSortByFirstTurn = createSelector(\n    [getPlayers, getPlayerWhoHasFirstTurn],\n    (players: IPlayer[], player: IPlayer | null) => {\n        const playerFirstTurnIndex = factionsMoveOrder.indexOf(player?.faction as string);\n        let turnOrder: (string | undefined)[] = [];\n\n        const isFound = playerFirstTurnIndex !== -1;\n\n        if (isFound) {\n            const reversedMoveOrder = factionsMoveOrder\n                .map((item, index) => {\n                    return _.nth(factionsMoveOrder, playerFirstTurnIndex - index);\n                })\n                .filter(faction => players.find(it => it.faction === faction));\n            const fistElement = reversedMoveOrder.slice(0, 1);\n            const other = reversedMoveOrder.slice(1, reversedMoveOrder.length).reverse();\n            turnOrder = [...fistElement, ...other];\n        }\n\n        return turnOrder.map(item => players.find(player => player.faction === item)) as IPlayer[];\n    });\n\nexport const getPlayerByFaction = (faction: string) => createSelector(\n    [getPlayers],\n    (players: IPlayer[]) => {\n        return players.find(item => findEngNameFactionToUrl(item.faction) === faction);\n    },\n);\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface INames {\n    name: string;\n    inputValue?: string;\n}\n\nconst initialState: INames[] = [];\n\nconst namesSlice = createSlice({\n    name: 'names',\n    initialState,\n    reducers: {\n        addName(state, action: PayloadAction<INames>) {\n            state.push(action.payload);\n        },\n        deleteName(state, action: PayloadAction<string>) {\n            return state.filter(({ name }) => name !== action.payload);\n        },\n        changeName(state, action: PayloadAction<string>) {\n            return state.map(obj => {\n\n                if (obj.name === action.payload) {\n                    return { ...obj, name: action.payload };\n                }\n\n                return obj;\n            });\n        },\n    },\n});\n\nexport const {\n    addName,\n    deleteName,\n    changeName,\n} = namesSlice.actions;\n\nexport default namesSlice.reducer;\n","import { RootState } from '../../app/rootReducer';\n\nexport const getNames = (state: RootState) => state.names\n","import { IconButton } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { editPlayer } from '../players/playersSlice';\nimport { getPlayerByFaction } from '../players/selectors';\nimport { addName, changeName, deleteName, INames } from './namesSlice';\nimport { getNames } from './selectors';\n\nconst filter = createFilterOptions<INames>();\n\nexport function AutocompletePlayerName() {\n    const { id } = useParams<{ id: string }>();\n    const names = useSelector(getNames);\n    const dispatch = useDispatch();\n    const player = useSelector(getPlayerByFaction(id));\n\n    const createName = (obj: INames) => {\n        dispatch(addName(obj));\n        if (player?.id) {\n            dispatch(editPlayer({ ...player, name: obj.name }));\n        }\n    };\n\n    const setName = (obj: INames) => {\n        dispatch(changeName(obj.name));\n        if (player?.id) {\n            dispatch(editPlayer({ ...player, name: obj.name }));\n        }\n    };\n\n    const handleDeleteName = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, name: string) => {\n        dispatch(deleteName(name));\n        event.stopPropagation();\n    };\n\n    return (\n        <Autocomplete\n            value={ { name: player?.name || 'Player' } }\n            onChange={ (event, newValue) => {\n                if (typeof newValue === 'string') {\n                    createName({\n                        name: newValue,\n                    });\n                } else if (newValue && newValue.inputValue) {\n                    createName({\n                        // Срабатывает, когда вводим имя\n                        name: newValue.inputValue,\n                    });\n                } else if (newValue) {\n                    if (player?.name === newValue.name) {\n                        return;\n                    }\n                    // Срабатывает, когда выбираем уже из доступных имен\n                    setName({ name: newValue.name });\n                }\n            } }\n            filterOptions={ (options, params) => {\n                const filtered = filter(options, params);\n\n                const isNameNotEmpty = params.inputValue !== '';\n                const isNameUnique = params.inputValue !== player?.name;\n                const isNameExist = names.findIndex(i => i.name === params.inputValue) === -1;\n                if (isNameNotEmpty && isNameUnique && isNameExist) {\n                    filtered.push({\n                        inputValue: params.inputValue,\n                        name: `Добавить \"${ params.inputValue }\"`,\n                    });\n                }\n\n                return filtered;\n            } }\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            options={ names }\n            getOptionLabel={ (option) => {\n                if (typeof option === 'string') {\n                    return option;\n                }\n\n                if (option?.inputValue) {\n                    return option.inputValue;\n                }\n\n                return option?.name;\n            } }\n            renderOption={ (option) => {\n                if (option.inputValue) return option.name;\n                return (\n                    <div\n                        style={ {\n                            display: 'flex',\n                            width: '100%',\n                            height: 30,\n                            justifyContent: 'space-between',\n                            alignItems: 'center',\n                        } }\n                    >\n                        <p>{ option.name }</p>\n                        <IconButton aria-label=\"delete\" onClick={ (event) => handleDeleteName(event, option.name) }>\n                            <DeleteIcon fontSize=\"small\" />\n                        </IconButton>\n                    </div>\n                );\n            } }\n            freeSolo\n            renderInput={ (params) => (\n                <TextField\n                    { ...params }\n                    label=\"Имя\"\n                    variant=\"outlined\"\n                    size=\"medium\"\n                    fullWidth\n                />\n            ) }\n        />\n    );\n}\n","import { Button, Card, CardActions, CardContent, Collapse, IconButton, MenuItem } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport clsx from 'clsx';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { factions, FactionType, mats } from '../../common/scytheLogic';\r\nimport FactionCharacterImage from '../../components/FactionCharacterImage';\r\nimport FactionIcon from '../../components/FactionIcon';\r\nimport { AutocompletePlayerName } from '../names/AutocompletePlayerName';\r\nimport { changeFieldInPlayer, deletePlayer } from './playersSlice';\r\nimport { getPlayerByFaction } from './selectors';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            minHeight: 370,\r\n        },\r\n        expand: {\r\n            transform: 'rotate(0deg)',\r\n            marginLeft: 'auto',\r\n            transition: theme.transitions.create('transform', {\r\n                duration: theme.transitions.duration.shortest,\r\n            }),\r\n        },\r\n        cardActions: {\r\n            paddingBottom: 0,\r\n            paddingTop: 0,\r\n        },\r\n        cardContent: {\r\n            paddingTop: 0,\r\n        },\r\n        expandOpen: {\r\n            transform: 'rotate(180deg)',\r\n        },\r\n        matImage: {\r\n            width: '100%',\r\n            height: 'auto',\r\n        },\r\n    }),\r\n);\r\n\r\nexport const PlayerCard: FunctionComponent = () => {\r\n    const { id: faction } = useParams<{ id: FactionType }>();\r\n    const player = useSelector(getPlayerByFaction(faction));\r\n    const dispatch = useDispatch();\r\n\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    if (!player?.id) return null;\r\n\r\n    const handleChangeFaction = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        dispatch(changeFieldInPlayer('faction', event.target.value, player.id));\r\n    };\r\n\r\n    const handleChangeMat = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        dispatch(changeFieldInPlayer('mat', event.target.value, player.id));\r\n    };\r\n\r\n    const handleDeletePlayer = () => {\r\n        dispatch(deletePlayer(player.id));\r\n    };\r\n\r\n    return (\r\n        <Card className={ classes.root }>\r\n            <FactionCharacterImage { ...factions.find(i => i.name === player.faction) } />\r\n            <CardContent>\r\n                <Grid container spacing={ 2 } direction={ 'row' }>\r\n                    <Grid item xs={ 12 } sm={ 6 }>\r\n                        <AutocompletePlayerName />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <TextField\r\n                            select\r\n                            SelectProps={ {\r\n                                renderValue: (value: any) => {\r\n                                    const faction = factions.find(i => i.name === value);\r\n                                    return (\r\n                                        <div\r\n                                            style={ {\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                            } }\r\n                                        >\r\n                                            { faction && <FactionIcon { ...faction } /> }\r\n                                        </div>);\r\n                                },\r\n                            } }\r\n                            label=\"Фракция\"\r\n                            value={ player.faction }\r\n                            onChange={ handleChangeFaction }\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                        >\r\n                            { factions.map((value) => (\r\n                                <MenuItem key={ value.name } value={ value.name }>\r\n                                    <FactionIcon { ...value } />&nbsp;&nbsp;&nbsp;{ value.name }\r\n                                </MenuItem>\r\n                            )) }\r\n                        </TextField>\r\n                    </Grid>\r\n\r\n                    <Grid item xs>\r\n                        <TextField\r\n                            select\r\n                            label=\"Планшет\"\r\n                            value={ player.mat }\r\n                            onChange={ handleChangeMat }\r\n                            variant=\"outlined\"\r\n                            size=\"medium\"\r\n                            fullWidth\r\n                        >\r\n                            { mats.map((mat) => (\r\n                                <MenuItem key={ mat.name } value={ mat.name }>\r\n                                    { mat.name }\r\n                                </MenuItem>\r\n                            )) }\r\n                        </TextField>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n\r\n            <CardActions disableSpacing className={ classes.cardActions }>\r\n                <Button\r\n                    color=\"secondary\"\r\n                    size=\"medium\"\r\n                    onClick={ handleDeletePlayer }\r\n                >\r\n                    Удалить\r\n                </Button>\r\n\r\n                <IconButton\r\n                    className={ clsx(classes.expand, {\r\n                        [classes.expandOpen]: expanded,\r\n                    }) }\r\n                    onClick={ handleExpandClick }\r\n                    aria-expanded={ expanded }\r\n                    aria-label=\"show mat\"\r\n                >\r\n                    <ExpandMoreIcon />\r\n                </IconButton>\r\n            </CardActions>\r\n\r\n            <Collapse in={ expanded } timeout=\"auto\" unmountOnExit>\r\n                <CardContent className={ classes.cardContent }>\r\n                    <img\r\n                        className={ classes.matImage }\r\n                        src={ `${ mats.find(mat => mat.name === player.mat)?.imgPath }` }\r\n                        alt={ player.mat }\r\n                    />\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    );\r\n};\r\n","import Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { FactionType, getRouteLastAddedPlayer, TOTAL_PLAYERS } from '../common/scytheLogic';\r\nimport { ButtonNewGame } from '../components/ButtonNewGame';\r\nimport { FullWidthTabs } from '../components/FullWidthTabs';\r\nimport { PlayerCard } from '../features/players/PlayerCard';\r\nimport { addPlayer } from '../features/players/playersSlice';\r\nimport { getPlayers } from '../features/players/selectors';\r\n\r\nconst Home: FunctionComponent = () => {\r\n    const players = useSelector(getPlayers);\r\n    const dispatch = useDispatch();\r\n\r\n    const { id: faction } = useParams<{ id: FactionType }>();\r\n\r\n    if (!faction && players.length) {\r\n        return <Redirect to={ getRouteLastAddedPlayer(players) } />;\r\n    }\r\n\r\n    if (!players.length) {\r\n        return <Redirect to={ '/' } />;\r\n    }\r\n\r\n    return (\r\n        <FullWidthTabs players={ players } faction={ faction }>\r\n            <PlayerCard />\r\n\r\n            <Grid container direction=\"column\" spacing={ 2 } justify={ 'center' } style={ { paddingTop: 20 } }>\r\n                <Grid item>\r\n                    <Button\r\n                        variant=\"contained\" disabled={ players.length >= TOTAL_PLAYERS } color=\"secondary\" fullWidth\r\n                        onClick={ () => dispatch(addPlayer()) }\r\n                    >\r\n                        Добавить игрока\r\n                    </Button>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <ButtonNewGame />\r\n                </Grid>\r\n            </Grid>\r\n        </FullWidthTabs>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getShortNameFaction, resources } from '../common/scytheLogic';\nimport { ButtonNewGame } from '../components/ButtonNewGame';\nimport MainLayout from '../components/MainLayout';\nimport { getPlayers } from '../features/players/selectors';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            borderCollapse: 'separate',\n            minWidth: 320,\n        },\n        sticky: {\n            position: 'sticky',\n            background: theme.palette.background.paper,\n            left: 0,\n            zIndex: 1,\n        },\n        resourceIcon: {\n            verticalAlign: 'middle',\n        },\n    }),\n);\n\nconst Result: FC = () => {\n    const classes = useStyles();\n    const players = useSelector(getPlayers);\n\n    const playersByWinningPosition = players\n        .sort((a, b) => b.points - a.points)\n        .map((player, index) => ({ ...player, gameEndPosition: index + 1 }));\n\n    return (\n        <MainLayout>\n\n            <TableContainer component={ Paper }>\n                <Table className={ classes.root } size=\"small\">\n                    { renderTableHeader() }\n                    { renderTableBody() }\n                </Table>\n            </TableContainer>\n\n            <br />\n\n            <ButtonNewGame />\n\n        </MainLayout>\n    );\n\n    function renderTableHeader() {\n        return (\n            <TableHead>\n                <TableRow>\n                    <TableCell align=\"center\" size={ 'small' }>№</TableCell>\n                    <TableCell className={ classes.sticky }>Игрок</TableCell>\n                    {\n                        resources.map(resource => (\n                            <TableCell align=\"center\" key={ resource.name }>\n                                <img className={ classes.resourceIcon } width={ 30 } height={ 30 } src={ resource.imgPath } alt={ resource.name } />\n                            </TableCell>\n                        ))\n                    }\n                    <TableCell align=\"center\">Всего</TableCell>\n                </TableRow>\n            </TableHead>\n        );\n    }\n\n    function renderTableBody() {\n        return (\n            <TableBody>\n                { playersByWinningPosition.map(({\n                    buildingBonuses,\n                    faction,\n                    gameEndPosition,\n                    gold,\n                    mat,\n                    name,\n                    points,\n                    popularity,\n                    resources,\n                    stars,\n                    territories,\n                    id\n                }) => (\n                    <TableRow key={ id }>\n                        <TableCell align=\"center\">{ gameEndPosition }</TableCell>\n                        <TableCell className={ classes.sticky } component=\"th\" scope=\"player\" size={ 'small' }>\n                            { name }\n                            <br />\n                            { getShortNameFaction(faction) }\n                            <br />\n                            { mat }\n                        </TableCell>\n                        <TableCell size={ 'small' } align=\"center\">{ popularity }</TableCell>\n                        <TableCell size={ 'small' } align=\"center\">{ stars }</TableCell>\n                        <TableCell size={ 'small' } align=\"center\">{ territories }</TableCell>\n                        <TableCell size={ 'small' } align=\"center\">{ resources }</TableCell>\n                        <TableCell size={ 'small' } align=\"center\">{ buildingBonuses }</TableCell>\n                        <TableCell size={ 'small' } align=\"center\">{ gold }</TableCell>\n                        <TableCell size={ 'small' } align=\"center\">{ points }</TableCell>\n                    </TableRow>\n                )) }\n            </TableBody>\n        );\n    }\n};\n\nexport default Result;\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport { Button, Grid, InputAdornment, TextField, Typography } from '@material-ui/core';\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HomeIcon from '@material-ui/icons/Home';\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\nimport StarIcon from '@material-ui/icons/Star';\nimport TerrainIcon from '@material-ui/icons/Terrain';\nimport React, { FC, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { foundPrevNextPlayers } from '../../common/scytheLogic';\nimport { scoreFormSubmit } from './playersSlice';\nimport { getPlayerByFaction, getPlayersSortByFirstTurn } from './selectors';\nimport { IPlayer, IPoints } from './types';\n\nconst text = {\n    min: `Значение не может быть отрицательным`,\n    max: (max: number) => `Значение не может быть больше ${ max }`,\n};\n\nconst schema = yup.object().shape({\n    gold: yup.number().required().min(0, text.min).integer().typeError('Введите накопленные монеты'),\n    popularity: yup.number().required().min(0, text.min).max(18, text.max(18)).integer().typeError('Введите накопленную популярность'),\n    stars: yup.number().required().min(0, text.min).max(6, text.max(6)).integer().typeError('Введите накопленные звезды'),\n    territories: yup.number().required().min(0, text.min).integer().typeError('Введите кол-во контролируемых территорий'),\n    resources: yup.number().required().min(0, text.min).integer().typeError('Введите кол-во контролируемых ресурсов'),\n    buildingBonuses: yup.number().required().min(0, text.min).max(9, text.max(9)).integer().typeError('Введите кол-во монет за бонус зданий'),\n});\n\nexport const ScoreForm: FC = () => {\n    const { id } = useParams<{ id: string }>();\n    const players = useSelector(getPlayersSortByFirstTurn);\n    const player = useSelector(getPlayerByFaction(id));\n    const dispatch = useDispatch();\n\n    const { nextPlayer } = foundPrevNextPlayers(players, player as IPlayer);\n\n    const { register, handleSubmit, errors, reset } = useForm<IPoints>({\n        defaultValues: {\n            gold: player?.gold,\n            popularity: player?.popularity,\n            stars: player?.stars,\n            territories: player?.territories,\n            resources: player?.resources,\n            buildingBonuses: player?.buildingBonuses,\n        },\n        mode: 'onSubmit',\n        resolver: yupResolver(schema),\n    });\n\n    useEffect(() => {\n        if (!player?.gold &&\n            !player?.popularity &&\n            !player?.stars &&\n            !player?.territories &&\n            !player?.resources &&\n            !player?.buildingBonuses) {\n            reset({\n                gold: undefined,\n                popularity: undefined,\n                stars: undefined,\n                territories: undefined,\n                resources: undefined,\n                buildingBonuses: undefined,\n            });\n        } else {\n            reset(player);\n        }\n    }, [reset, player]);\n\n    const onSubmit = (formData: IPoints) => {\n        if (player) {\n            dispatch(scoreFormSubmit(player, formData, nextPlayer));\n        }\n    };\n\n    const handleOnFocus = (event: React.FocusEvent<any>): void => {\n        event.target.select();\n    };\n\n    return (\n        <form onSubmit={ handleSubmit(onSubmit) } autoComplete=\"off\">\n            <Grid container direction={ 'column' } spacing={ 2 }>\n                <Grid item>\n                    <TextField\n                        error={ !!errors.gold }\n                        helperText={ (errors?.gold as any)?.message }\n                        inputRef={ register }\n                        id=\"gold\"\n                        name=\"gold\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Монеты на руках\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <MonetizationOnIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.popularity }\n                        helperText={ (errors?.popularity as any)?.message }\n                        inputRef={ register }\n                        id=\"popularity\"\n                        name=\"popularity\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Популярность\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <FavoriteIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.stars }\n                        helperText={ (errors?.stars as any)?.message }\n                        inputRef={ register }\n                        id=\"stars\"\n                        name=\"stars\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Кол-во звезд\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <StarIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.territories }\n                        helperText={ (errors?.territories as any)?.message }\n                        inputRef={ register }\n                        id=\"territories\"\n                        name=\"territories\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Территорий (фабрика дает +3)\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <TerrainIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.resources }\n                        helperText={ (errors?.resources as any)?.message }\n                        inputRef={ register }\n                        id=\"resources\"\n                        name=\"resources\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Всего ресурсов (каждый ресурс)\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <DonutLargeIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <TextField\n                        error={ !!errors.buildingBonuses }\n                        helperText={ (errors?.buildingBonuses as any)?.message }\n                        inputRef={ register }\n                        id=\"buildingBonuses\"\n                        name=\"buildingBonuses\"\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        label=\"Бонусы зданий\"\n                        type=\"number\"\n                        onFocus={ handleOnFocus }\n                        InputProps={ {\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <HomeIcon />\n                                </InputAdornment>\n                            ),\n                        } }\n                    />\n                </Grid>\n\n                <Grid item>\n                    <Grid container alignItems={ 'center' } justify={ 'space-between' } spacing={ 2 }>\n                        <Grid item xs={ 12 }>\n                            <Button type=\"submit\" color=\"primary\" variant=\"contained\" fullWidth>Подсчитать</Button>\n                        </Grid>\n\n                        { player?.points\n                            ? <Grid item><Typography variant={ 'h6' }>Очков: { player?.points }</Typography></Grid>\n                            : null\n                        }\n                    </Grid>\n                </Grid>\n            </Grid>\n        </form>\n    );\n};\n","import { Grid, Typography } from '@material-ui/core';\r\nimport React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { FactionType } from '../common/scytheLogic';\r\nimport { FullWidthTabs } from '../components/FullWidthTabs';\r\nimport { ScoreForm } from '../features/players/ScoreForm';\r\nimport { getPlayerByFaction, getPlayersSortByFirstTurn } from '../features/players/selectors';\r\nimport NotFound from './NotFound';\r\n\r\nconst Score: FC = () => {\r\n    const { id: faction } = useParams<{ id: FactionType }>();\r\n    const players = useSelector(getPlayersSortByFirstTurn);\r\n    const player = useSelector(getPlayerByFaction(faction));\r\n\r\n    if (!player || !players) return <NotFound />;\r\n\r\n    return (\r\n        <>\r\n            <FullWidthTabs players={ players } faction={ faction }>\r\n                <Grid container direction={ 'column' } spacing={ 3 } style={ { height: '100%' } }>\r\n                    <Grid item>\r\n                        <Typography variant={ 'h5' }>Игрок: { player.name }</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item><ScoreForm /></Grid>\r\n                </Grid>\r\n            </FullWidthTabs>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Score;\r\n","import First from './pages/First';\r\nimport Home from './pages/Home';\r\nimport NotFound from './pages/NotFound';\r\nimport Result from './pages/Result';\r\nimport Score from './pages/Score';\r\nimport Settings from './pages/Settings';\r\n\r\nexport const routes = {\r\n    'first': {\r\n        path: '/',\r\n        title: '',\r\n        exact: true,\r\n        component: First,\r\n    },\r\n    'index': {\r\n        path: '/faction/:id?/',\r\n        title: 'Фракции',\r\n        exact: false,\r\n        component: Home,\r\n    },\r\n    'score': {\r\n        path: '/score/:id?/',\r\n        title: 'Подсчет очков',\r\n        exact: true,\r\n        component: Score,\r\n    },\r\n    'result': {\r\n        path: '/result',\r\n        title: 'Итоги по окончанию игры',\r\n        exact: true,\r\n        component: Result,\r\n    },\r\n    'map': {\r\n        path: '/map',\r\n        title: 'Карта',\r\n        exact: true,\r\n        component: NotFound,\r\n    },\r\n    'settings': {\r\n        path: '/settings',\r\n        title: 'Настройки',\r\n        exact: true,\r\n        component: Settings,\r\n    },\r\n};\r\n","import { Grid, Link } from '@material-ui/core';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport React, { FunctionComponent } from 'react';\nimport MainLayout from '../components/MainLayout';\n\ninterface OwnProps {}\n\ntype Props = OwnProps;\n\nconst Settings: FunctionComponent<Props> = (props) => {\n    return (\n        <MainLayout>\n            <Grid container>\n                <Grid item>\n                    <Link rel=\"noopener\" href=\"https://github.com/justbenya/scythe-app\">\n                        <GitHubIcon fontSize={ 'large' } style={ { color: '#fff' } } />\n                    </Link>\n                </Grid>\n\n            </Grid>\n\n        </MainLayout>\n    );\n};\n\nexport default Settings;\n","import { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { RootState } from '../app/rootReducer';\r\nimport { findEngNameFactionToUrl, getLastAddedFaction } from '../common/scytheLogic';\r\nimport { clearPath } from '../common/utils';\r\nimport { getPlayerWhoHasFirstTurn } from '../features/players/selectors';\r\nimport { IPlayer } from '../features/players/types';\r\nimport { routes } from '../routes';\r\n\r\nexport const AppMenuNavigation: FC = () => {\r\n    const history = useHistory();\r\n    const players = useSelector<RootState, IPlayer[]>(state => Object.values(state.players));\r\n    const player = useSelector(getPlayerWhoHasFirstTurn);\r\n\r\n    return (\r\n        <BottomNavigation className=\"menu-footer\" value={ history.location.pathname } showLabels>\r\n            <BottomNavigationAction\r\n                icon={ <PeopleIcon /> }\r\n                component={ Link }\r\n                label=\"Игроки\"\r\n                value={ history.location.pathname.includes(clearPath(routes.index.path)) ? history.location.pathname : null }\r\n                to={ `${ clearPath(routes.index.path) }${ getLastAddedFaction(players) }` }\r\n            />\r\n\r\n            <BottomNavigationAction\r\n                disabled={ !players.length }\r\n                icon={ <DonutLargeIcon /> }\r\n                component={ Link }\r\n                label=\"Очки\"\r\n                value={ history.location.pathname.includes(clearPath(routes.score.path)) ? history.location.pathname : null }\r\n                to={ `${ clearPath(routes.score.path) }${ findEngNameFactionToUrl(player?.faction) }` }\r\n            />\r\n\r\n            <BottomNavigationAction\r\n                disabled={ !players.length }\r\n                icon={ <ListAltIcon /> }\r\n                component={ Link }\r\n                label=\"Результаты\"\r\n                value={ routes.result.path }\r\n                to={ routes.result.path }\r\n            />\r\n\r\n            {/*<BottomNavigationAction*/}\r\n            {/*    icon={ <SettingsIcon /> }*/}\r\n            {/*    component={ Link }*/}\r\n            {/*    label=\"Настройки\"*/}\r\n            {/*    value=\"/settings\"*/}\r\n            {/*    to=\"/settings\"*/}\r\n            {/*/>*/}\r\n        </BottomNavigation>\r\n    );\r\n};\r\n","import Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport React, { FC } from 'react';\r\n// @ts-ignore\r\nimport useOrientationChange from 'use-orientation-change';\r\nimport { AppMenuNavigation } from './AppMenuNavigation';\r\n\r\nconst useStyles = makeStyles({\r\n    fixed: {\r\n        '@media (min-width: 600px)': {\r\n            maxWidth: '100%',\r\n        },\r\n        '@media (min-width: 960px)': {\r\n            maxWidth: 960,\r\n        },\r\n        '@media (min-width: 1280px)': {\r\n            maxWidth: 1280,\r\n        },\r\n    },\r\n    main: {\r\n        height: '100%',\r\n        padding: '20px 0 50px 0',\r\n    },\r\n});\r\n\r\ntype Props = {\r\n    [name: string]: any;\r\n}\r\n\r\nconst MainLayout: FC<Props> = (props) => {\r\n    const { className } = props;\r\n    const classes = useStyles();\r\n    const orientation = useOrientationChange();\r\n\r\n    return (\r\n        <>\r\n            <Container fixed className={ classes.fixed }>\r\n                <main className={ clsx(classes.main, className) }>{ props.children }</main>\r\n            </Container>\r\n\r\n            { orientation === 'landscape' ? null : <AppMenuNavigation /> }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainLayout;\r\n","import { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport MainLayout from '../components/MainLayout';\n\nconst NotFound: FunctionComponent = () => {\n    return (\n        <MainLayout>\n            <Typography variant={ 'h1' } align={ 'center' }>404?!</Typography>\n            <Button component={ Link } to={ '/' } variant=\"outlined\" color=\"primary\" fullWidth>\n                Вернуться на главную\n            </Button>\n        </MainLayout>\n    );\n};\n\nexport default NotFound;\n","import { createMuiTheme, CssBaseline } from '@material-ui/core';\r\nimport red from '@material-ui/core/colors/red';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { Route, Router, Switch } from 'react-router-dom';\r\nimport history from '../history';\r\nimport NotFound from '../pages/NotFound';\r\nimport { routes } from '../routes';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        secondary: red,\r\n        primary: {\r\n            main: '#FFB74D',\r\n            light: 'rgb(255, 197, 112)',\r\n            dark: 'rgb(200, 147, 89)',\r\n            contrastText: 'rgba(0, 0, 0, 0.87)',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n    },\r\n});\r\n\r\nconst App: FunctionComponent = () => (\r\n    <ThemeProvider theme={ theme }>\r\n        <CssBaseline />\r\n        <Router history={ history }>\r\n            <Switch>\r\n                { Object.values(routes).map((route: any) => <Route key={ route.path } { ...route } />) }\r\n                <Route component={ NotFound } />\r\n            </Switch>\r\n        </Router>\r\n    </ThemeProvider>\r\n);\r\n\r\nexport default App;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport names from '../features/names/namesSlice';\r\nimport players from '../features/players/playersSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n    players,\r\n    names\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default rootReducer;\r\n","import { Action, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport rootReducer, { RootState } from './rootReducer';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    version: 2,\r\n    storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware: getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { StylesProvider } from '@material-ui/core/styles';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './app/App';\nimport store, { persistor } from './app/store';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n    <Provider store={ store }>\n        <PersistGate loading={ null } persistor={ persistor }>\n            <StylesProvider injectFirst>\n                <App />\n            </StylesProvider>\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root'),\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}